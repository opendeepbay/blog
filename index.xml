<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Second State News and Articles</title>
    <link>http://blog.secondstate.io/</link>
    <description>Recent content on Second State News and Articles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Feb 2020 20:01:23 +0800</lastBuildDate>
    
        <atom:link href="http://blog.secondstate.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Second State 又获以太坊生态体系的资助奖励</title>
      <link>http://blog.secondstate.io/post/20200217-soll-zh/</link>
      <pubDate>Sun, 16 Feb 2020 20:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20200217-soll-zh/</guid>
      
        <description>&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20200216-soll-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.secondstate.io/&#34;&gt;Second State&lt;/a&gt; 最近获得了以太坊生态最大的去中心化自治组织（DAO） &lt;a href=&#34;https://panvala.com/&#34;&gt;Panvala&lt;/a&gt; 的资助奖励。Panvala 由 ConsenSys 创立孵化，为以太坊生态里最重要的基础软件项目提供资金支持。Panvala 已经资助过的项目包括 Sigma Prime, Prysmatic Labs, MakerDAO, Aragon, Status, and Gitcoin。&lt;/p&gt;

&lt;p&gt;在获得 Panvala 资助之前，Second State 已经是公认的以太坊基础设施的核心开发者之一，并获得了&lt;a href=&#34;https://blog.secondstate.io/post/20191022-soll-compiler-project-zh/&#34;&gt;以太坊基金会&lt;/a&gt;与以太经典实验室的资金支持。&lt;/p&gt;

&lt;p&gt;这次 Panvala 资助了 Second State 的 &lt;a href=&#34;https://github.com/second-state/SOLL&#34;&gt;SOLL 编译器项目&lt;/a&gt;。SOLL 编译器是以太坊2.0的关键工具与核心技术之一。
SOLL 是世界上第一个将 Solidity 智能合约编译为 WebAssembly 字节码，并成功部署到以太坊基金会官方 Ewasm （以太坊 WebAssembly）测试网中的工具链。在 SOLL 之前，没有简单的工具可以将Solidity 智能合约编译并部署到基于Ewasm 的区块链上。SOLL 极大地完善了实现以太坊 2.0 所需的基础设施。&lt;/p&gt;

&lt;p&gt;Second State 团队于2020年1月发布了 &lt;a href=&#34;https://github.com/second-state/SOLL/releases&#34;&gt;SOLL 编译器的0.0.5 版本&lt;/a&gt;。这个版本增加了对 YUL 中间语言的支持，使得整个工具链的前端可以支持包括 Solidity 与 Vyper 在内的多种编程语言。目前，SOLL 已经支持了 YUL 基础的语法，如基本的算术、比较、存储和加载内置函数。Panvala 的资助会让 SOLL 更快的达到全面支持以太坊前端语言的目标。&lt;/p&gt;

&lt;p&gt;延伸阅读&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/second-state/SOLL&#34;&gt;SOLL 项目源代码 repo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=X-A6sP_HTy0&#34;&gt;关于 Ewasm 的 SOLL 的视频演示&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/etclabscore/evm_llvm&#34;&gt;EVM-LLVM 项目&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/second-state/buidl&#34;&gt;Second State BUIDL IDE &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/getting-started&#34;&gt;BUIDL入门指南&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Second State receives another grant award for the SOLL compiler</title>
      <link>http://blog.secondstate.io/post/20200216-soll-en/</link>
      <pubDate>Fri, 14 Feb 2020 20:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20200216-soll-en/</guid>
      
        <description>

&lt;p&gt;&lt;a href=&#34;https://www.secondstate.io/&#34;&gt;Second State&lt;/a&gt; has been &lt;a href=&#34;https://medium.com/@Panvala/chainsafe-dappnode-and-more-receive-ethereum-grants-in-batch-five-c8696c782044&#34;&gt;awarded&lt;/a&gt; a development grant from &lt;a href=&#34;https://panvala.com/&#34;&gt;Panvala&lt;/a&gt;, a leading DAO (Decentralized Autonomous Organization) in the Ethereum ecosystem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20200216-soll-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Founded at ConsenSys, Panvala provides funding support for critical software development efforts in the Ethereum ecosystem. Past Panvala grant awardees include Sigma Prime, Prysmatic Labs, MakerDAO, Aragon, Status, and Gitcoin.&lt;/p&gt;

&lt;p&gt;Prior to the Panvala grant, Second State is already a recognized leader in Ethereum infrastructure development. It is had received funding and prizes from both &lt;a href=&#34;https://medium.com/wasm/second-state-receives-a-prestigious-award-from-the-ethereum-foundation-for-the-soll-compiler-5fb3c3eb21fc?source=collection_home---5------7-----------------------&#34;&gt;the Ethereum Foundation&lt;/a&gt; and Ethereum Classic Labs.&lt;/p&gt;

&lt;p&gt;Panvala awarded &lt;a href=&#34;https://github.com/second-state/SOLL&#34;&gt;Second State’ SOLL compiler project&lt;/a&gt; for critical tooling support for Ethereum 2.0. SOLL is the &lt;em&gt;world’s first&lt;/em&gt; toolchain that compiles Solidity smart contracts into WebAssembly bytecode and successfully deploys onto Ethereum Foundation’s official Ewasm (Ethereum flavored WebAssembly) testnet. Prior to SOLL, there were no easy tools to compile and deploy Solidity smart contracts to Ewasm-based blockchains. SOLL completes the &lt;a href=&#34;https://github.com/second-state/SOLL&#34;&gt;missing toolchain for Ewasm&lt;/a&gt;, and is a key infrastructure for Ethereum 2.0.&lt;/p&gt;

&lt;p&gt;The Second State team released &lt;a href=&#34;https://github.com/second-state/SOLL/releases&#34;&gt;the 0.0.5 version of the SOLL compiler&lt;/a&gt; in January 2020. This release adds support for the YUL intermediate language, enabling multiple language front ends such as Solidity and Vyper to be compiled into Ewasm targets. Currently, SOLL supports the basic functions of YUL, such as basic arithmetic, comparison, storage, and loading of built-in functions. With support from Panvala, it will continue to evolve and aim to support the full Ethereum language specifications in the next several months!&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Source code repo to the SOLL project. &lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;https://github.com/second-state/soll&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A video demonstration of SOLL on Ewasm. &lt;a href=&#34;https://www.youtube.com/watch?v=X-A6sP_HTy0&#34;&gt;https://www.youtube.com/watch?v=X-A6sP_HTy0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The EVM-LLVM project &lt;a href=&#34;https://github.com/etclabscore/evm_llvm&#34;&gt;https://github.com/etclabscore/evm_llvm&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Second State BUIDL IDE project. &lt;a href=&#34;https://github.com/second-state/buidl&#34;&gt;https://github.com/second-state/buidl&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;BUIDL Getting Started guide. &lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/getting-started&#34;&gt;https://docs.secondstate.io/buidl-developer-tool/getting-started&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>只需 5 分钟，教你如何编写并执行一个 Rust &#43; WebAssembly 程序</title>
      <link>http://blog.secondstate.io/post/20191220-rust-webassembly-zh/</link>
      <pubDate>Fri, 06 Dec 2019 09:42:14 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191220-rust-webassembly-zh/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;在探讨 WASM 在服务端的巨大潜力时，我们提到 WASM 的一大优势就是支持有影响力的新锐编程语言，例如 Rust 。这篇文章将展示如何编写并执行一个 Wasm Rust 程序，只有代码。
本文作者： Second State 的研究员、开源核心开发 Tim McCallum。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下为正文：&lt;/p&gt;

&lt;p&gt;该演示是使用 Ubuntu Linux 操作系统和 Google 的 Chrome 浏览器进行的。其他组合尚未经过测试。&lt;/p&gt;

&lt;h3 id=&#34;第1步-安装-apache2-和-rust&#34;&gt;第1步：安装 Apache2 和 Rust&lt;/h3&gt;

&lt;p&gt;运行以下所有 Ubuntu 系统设置命令（更新，安装 Apache2 和 Rust ）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;sudo apt-get update
sudo apt-get -y upgrade
sudo apt-get -y install apache2
sudo chown -R $USER:$USER /var/www/html
curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env
rustup target add wasm32-wasi
rustup override set nightly&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;第2步-创建一个新的-rust-项目&#34;&gt;第2步：创建一个新的 Rust 项目&lt;/h3&gt;

&lt;p&gt;创建一个快速的 Rust 项目&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;cd ~
cargo new --lib triple
cd triple&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;第3步-为-wasm-配置-rust&#34;&gt;第3步：为 Wasm 配置 Rust&lt;/h3&gt;

&lt;p&gt;通过将下面的配置添加到 〜/ triple / Cargo.toml 文件的 lib 部分来配置 rust&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;[lib]
name = &amp;#34;triple_lib&amp;#34;
path = &amp;#34;src/triple.rs&amp;#34;
crate-type =[&amp;#34;cdylib&amp;#34;]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;第4步-指定构建目标&#34;&gt;第4步：指定构建目标&lt;/h3&gt;

&lt;p&gt;通过在 〜/ .cargo.config 中创建一个新文件并添加以下配置来完成 Rust 的配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;[build]
target = &amp;#34;wasm32-wasi&amp;#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;第5步-写-rust&#34;&gt;第5步：写 Rust&lt;/h3&gt;

&lt;p&gt;编写一个快速的 Rust 程序并将其保存为 Triple.rs（在 〜/ triple / src 目录中）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;#[no_mangle]
pub extern fn triple(x: i32) -&amp;gt; i32 {
 return 3 * x;
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;第6步-构建-wasm-代码&#34;&gt;第6步：构建 Wasm 代码&lt;/h3&gt;

&lt;p&gt;将 Rust 代码构建到 Wasm 中，然后将 Wasm 文件复制到 Apache2 Web 服务器区域&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;cd ~/triple
cargo build - release
cp -rp ~/triple/target/wasm32-wasi/release/triple_lib.wasm /var/www/html/triple.wasm&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;第7步-制作-html-网页&#34;&gt;第7步：制作 HTML 网页&lt;/h3&gt;

&lt;p&gt;在 var / www / html / 目录中创建一个名为 Triple.html 的新文件，并使用以下代码填充它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&amp;lt;html&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&amp;#34; integrity=&amp;#34;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; /&amp;gt;
		&amp;lt;script&amp;gt;
    if (!(&amp;#39;WebAssembly&amp;#39; in window)) {
      alert(&amp;#39;you need a browser with wasm support enabled :(&amp;#39;);
    }
(async () =&amp;gt; {
  const response = await fetch(&amp;#39;triple.wasm&amp;#39;);
  const buffer = await response.arrayBuffer();
  const module = await WebAssembly.compile(buffer);
  const instance = await WebAssembly.instantiate(module);
  const exports = instance.exports;
  const triple = exports.triple;
  var buttonOne = document.getElementById(&amp;#39;buttonOne&amp;#39;);
        buttonOne.value = &amp;#39;Triple the number&amp;#39;;
        buttonOne.addEventListener(&amp;#39;click&amp;#39;, function() {
          var input = $(&amp;#34;#numberInput&amp;#34;).val();
          alert(input + &amp;#39; tripled equals &amp;#39; + triple(input));
        }, false);
})();    

  &amp;lt;/script&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
			&amp;lt;div class=&amp;#34;col-sm-4&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
			&amp;lt;div class=&amp;#34;col-sm-4&amp;#34;&amp;gt;
				&amp;lt;b&amp;gt;Rust to Wasm in under 5 minutes - Triple the number&amp;lt;/b&amp;gt;
			&amp;lt;/div&amp;gt;
			&amp;lt;div class=&amp;#34;col-sm-4&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;hr /&amp;gt;
		&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
			&amp;lt;div class=&amp;#34;col-sm-2&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
			&amp;lt;div class=&amp;#34;col-sm-4&amp;#34;&amp;gt;Place a number in the box&amp;lt;/div&amp;gt;
			&amp;lt;div class=&amp;#34;col-sm-4&amp;#34;&amp;gt; Click the button&amp;lt;/div&amp;gt;
			&amp;lt;div class=&amp;#34;col-sm-2&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
			&amp;lt;div class=&amp;#34;col-sm-2&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
			&amp;lt;div class=&amp;#34;col-sm-4&amp;#34;&amp;gt;
				&amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;numberInput&amp;#34; placeholder=&amp;#34;1&amp;#34;, value=&amp;#34;1&amp;#34;&amp;gt;
				&amp;lt;/div&amp;gt;
				&amp;lt;div class=&amp;#34;col-sm-4&amp;#34;&amp;gt;
					&amp;lt;button class=&amp;#34;bg-light&amp;#34; id=&amp;#34;buttonOne&amp;#34;&amp;gt;Triple the number&amp;lt;/button&amp;gt;
				&amp;lt;/div&amp;gt;
				&amp;lt;div class=&amp;#34;col-sm-2&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
			&amp;lt;/div&amp;gt;
		&amp;lt;/body&amp;gt;
		&amp;lt;script
  src=&amp;#34;https://code.jquery.com/jquery-3.4.1.js&amp;#34;
  integrity=&amp;#34;sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=&amp;#34;
  crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;第8步-单击鼠标执行写好的-rust-代码&#34;&gt;第8步：单击鼠标执行写好的 Rust 代码&lt;/h3&gt;

&lt;p&gt;在 triple HTML 页面：&lt;a href=&#34;http://12.345.456.78/triple.html&#34;&gt;http://12.345.456.78/triple.html&lt;/a&gt; 上访问计算机的IP。&lt;/p&gt;

&lt;p&gt;然后单击 “Triple the number” 按钮。
&lt;img src=&#34;images/20191220-rust-webassembly-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;将显示以下提示。
&lt;img src=&#34;images/20191220-rust-webassembly-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（如图所示：8的三倍等于24）&lt;/p&gt;

&lt;p&gt;到这里我们就完成了一个Rust + WebAssembly 程序，你也来试试吧！&lt;/p&gt;

&lt;p&gt;作者：Michael_Yuan
链接：&lt;a href=&#34;https://juejin.im/post/5de62000e51d4557f852a141&#34;&gt;https://juejin.im/post/5de62000e51d4557f852a141&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title> Ethereum Development A2Z| Smart Contract ABI </title>
      <link>http://blog.secondstate.io/post/20191118-ethereum-developer-abi-en/</link>
      <pubDate>Tue, 19 Nov 2019 09:42:14 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191118-ethereum-developer-abi-en/</guid>
      
        <description>

&lt;p&gt;Learn Ethereum development and acquire complex technical concepts in a snap!&lt;/p&gt;

&lt;p&gt;Second State Inc is to release Ethereum development A2Z series articles to help you learn Ethereum in a short time starting from the basics, with real blockchain development cases.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191112-abi-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This article is to introduce Smart Contract ABI, the first piece in the series.&lt;/p&gt;

&lt;p&gt;Blockchain Smart Contract ABI is the interface between smart contracts and blockchain applications. After a smart contract is compiled into a binary file by a compiler like &lt;a href=&#34;https://buidl.secondstate.io/&#34;&gt;BUIDL&lt;/a&gt;, an ABI for this smart contract is automatically generated, recording the functions and parameters of the smart contract. When a user uses a blockchain application, the smart contract will be called with this ABI.&lt;/p&gt;

&lt;h2 id=&#34;what-is-an-abi&#34;&gt;What is an ABI&lt;/h2&gt;

&lt;p&gt;ABI is the abbreviation for Application Binary Interface, which is the interface for applications to call binary application files. ABI is a convention that is customary.&lt;/p&gt;

&lt;p&gt;Just like we press the buttons on the remote control to  lower/adjust the temperature, we use ABI to control a program’s parameters. The remote control is equivalent to an ABI, which records the functions and parameters, like the air conditioner’s heating/cooling, and the highest and lowest temperature that the air conditioner can achieve. As the functions of the air conditioner expand: the sleep mode, ventilation, etc., the buttons on the remote control (ABI) also grow.&lt;/p&gt;

&lt;p&gt;An ABI enables user&amp;rsquo;s interaction with the program.&lt;/p&gt;

&lt;h2 id=&#34;abi-in-the-development-of-ethereum&#34;&gt;ABI in the development of Ethereum&lt;/h2&gt;

&lt;p&gt;In the Ethereum/Blockchain development, smart contract ABI is very common. After a smart contract is compiled, the compiler automatically generates an ABI to record the functions and parameters of the smart contract. When blockchain applications are used, people use ABIs to call smart contracts to implement related functions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191112-abi-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Take the default code in the &lt;a href=&#34;https://buidl.secondstate.io/&#34;&gt;BUIDL&lt;/a&gt; IDE developed by Second State Inc, a blockchain infrastructure software technology company, as an example. The code of the smart contract is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;[{&amp;#34;constant&amp;#34;: false,&amp;#34;inputs&amp;#34;: [{&amp;#34;name&amp;#34;: &amp;#34;x&amp;#34;,&amp;#34;type&amp;#34;: &amp;#34;uint256&amp;#34;}],&amp;#34;name&amp;#34;: &amp;#34;set&amp;#34;,&amp;#34;outputs&amp;#34;: [],&amp;#34;payable&amp;#34;: false,&amp;#34;stateMutability&amp;#34;: &amp;#34;nonpayable&amp;#34;,&amp;#34;type&amp;#34;: &amp;#34;function&amp;#34;},{&amp;#34;constant&amp;#34;: true,&amp;#34;inputs&amp;#34;: [],&amp;#34;name&amp;#34;: &amp;#34;get&amp;#34;,&amp;#34;outputs&amp;#34;: [{&amp;#34;name&amp;#34;: &amp;#34;&amp;#34;,&amp;#34;type&amp;#34;: &amp;#34;uint256&amp;#34;}],&amp;#34;payable&amp;#34;: false,&amp;#34;stateMutability&amp;#34;: &amp;#34;view&amp;#34;,&amp;#34;type&amp;#34;: &amp;#34;function&amp;#34;}]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The ABI generated by the smart contract is an array of JSON format, with a parameters name-value pair. When the smart contract is called, it is via ABI we know what certain functions the smart contract implement and what the parameters are.&lt;/p&gt;

&lt;p&gt;Note: ABI is not unique. The smart contract implementations with the same functionality can have the same ABI.&lt;/p&gt;

&lt;p&gt;When we use &lt;a href=&#34;https://buidl.secondstate.io/&#34;&gt;BUIDL&lt;/a&gt; for subsequent DApp development work, we find that the JavaScript section records the ABI of the current smart contract, enabling the application to call smart contracts and interact with them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191112-abi-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;about-buidl-ide-https-www-secondstate-io-buidl-an-one-stop-blockchain-development-tool&#34;&gt;About &lt;a href=&#34;https://www.secondstate.io/buidl/&#34;&gt;BUIDL IDE&lt;/a&gt; - An One-Stop Blockchain Development Tool&lt;/h2&gt;

&lt;p&gt;The BUIDL IDE is a highly integrated and fully browser-based development tool that allows developers to easily create and deploy blockchain applications (DApps) with BUIDL, saving a lot of time by eliminating the need to install any software and blockchain wallets.&lt;/p&gt;

&lt;p&gt;BUIDL functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Built-in account management system, no wallet software required;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Write, compile and deploy smart contracts;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development DApps with HTML5 and JavaScript;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-click publishing of DApps to Github Pages&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;Deployment on Ethereum and any blockchain compatible with Ethereum;&lt;/li&gt;
&lt;li&gt;Access to the built-in Web3 library；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support of rule-based smart contracts;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Built-in real-time smart contract search engine based on ElasticSearch;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More Info:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BUIDL Intro Page
&lt;a href=&#34;https://www.secondstate.io/buidl/&#34;&gt;https://www.secondstate.io/buidl/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BUIDL IDE
&lt;a href=&#34;https://buidl.secondstate.io/&#34;&gt;https://buidl.secondstate.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BUIDL Documentation
&lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/getting-started&#34;&gt;https://docs.secondstate.io/buidl-developer-tool/getting-started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BUIDL GitHub Repo
&lt;a href=&#34;https://github.com/second-state&#34;&gt;https://github.com/second-state&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title> ABI | 以太坊开发A2Z </title>
      <link>http://blog.secondstate.io/post/20191112-ethereum-developer-abi-zh/</link>
      <pubDate>Tue, 12 Nov 2019 09:42:14 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191112-ethereum-developer-abi-zh/</guid>
      
        <description>

&lt;p&gt;快速了解以太坊开发，快速 get 复杂的技术概念！
Second State 推出以太坊开发A2Z 系列，结合区块链开发的实际情况，带你了解以太坊开发的点点面面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191112-abi-01.png&#34; alt=&#34;&#34; /&gt;
这篇文章是该系列的第一篇，为大家讲述智能合约ABI。&lt;/p&gt;

&lt;p&gt;简短版：区块链智能合约ABI是智能合约与区块链应用程序之间的接口。智能合约被像BUIDL这样的编译器编译成二进制文件后，会自动生成ABI。ABI是JSON文本文件，记录了智能合约的function 和参数。在用户使用区块链应用程序时，需要通过ABI 来调用智能合约。&lt;/p&gt;

&lt;h2 id=&#34;什么是abi&#34;&gt;什么是ABI&lt;/h2&gt;

&lt;p&gt;ABI是Application Binary Interface的缩写，是其他应用程序调用二进制应用程序文件的接口。ABI 是一种约定俗成的规范。&lt;/p&gt;

&lt;p&gt;举例来说，夏天打开空调降温，通常需要一个遥控器。我们通过调节遥控器的按钮，来让空调执行制冷，降低/调高温度等操作。遥控器就相当于一个ABI，上面记录了与之相匹配的空调能够实现的功能与参数：制热/制热，空调能够达到的最高与最低温度是多少。随着空调本身功能的增多，比如增加了睡眠模式，通风等，遥控器（ABI）上的按钮也会随之丰富起来。&lt;/p&gt;

&lt;p&gt;ABI 实现了用户与程序的互动。&lt;/p&gt;

&lt;h2 id=&#34;以太坊开发中的abi&#34;&gt;以太坊开发中的ABI&lt;/h2&gt;

&lt;p&gt;在以太坊/区块链开发中，智能合约ABI 非常常见。智能合约编译后，编译器自动生成ABI 来记录智能合约的function与参数。当区块链应用被使用时，人们通过ABI 来调用智能合约，实现相关功能。&lt;/p&gt;

&lt;p&gt;以区块链基础软件技术公司Second State 开发的 BUIDL IDE 内置的默认代码为例，合约代码如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191112-abi-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;经过BUIDL 编译后，我们获得了如下的ABI。智能合约生成的ABI是JSON 格式的数组，包含两组参数，一个是参数名称，一个是参数值。在调用智能合约时，通过ABI 了解该智能合约实现了哪些功能，参数又是什么。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;[{&amp;#34;constant&amp;#34;: false,&amp;#34;inputs&amp;#34;: [{&amp;#34;name&amp;#34;: &amp;#34;x&amp;#34;,&amp;#34;type&amp;#34;: &amp;#34;uint256&amp;#34;}],&amp;#34;name&amp;#34;: &amp;#34;set&amp;#34;,&amp;#34;outputs&amp;#34;: [],&amp;#34;payable&amp;#34;: false,&amp;#34;stateMutability&amp;#34;: &amp;#34;nonpayable&amp;#34;,&amp;#34;type&amp;#34;: &amp;#34;function&amp;#34;},{&amp;#34;constant&amp;#34;: true,&amp;#34;inputs&amp;#34;: [],&amp;#34;name&amp;#34;: &amp;#34;get&amp;#34;,&amp;#34;outputs&amp;#34;: [{&amp;#34;name&amp;#34;: &amp;#34;&amp;#34;,&amp;#34;type&amp;#34;: &amp;#34;uint256&amp;#34;}],&amp;#34;payable&amp;#34;: false,&amp;#34;stateMutability&amp;#34;: &amp;#34;view&amp;#34;,&amp;#34;type&amp;#34;: &amp;#34;function&amp;#34;}]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;注意：ABI 并不是唯一的。如果智能合约实现的功能一样，那么编译出的ABI 也是一样的。&lt;/p&gt;

&lt;p&gt;当我们使用BUIDL 进行下一步DApp 开发工作时，会发现JavaScript 版块记录了当前智能合约的ABI，使应用程序能够调用智能合约，与之互动。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191112-abi-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;关于-buidl-ide-https-www-secondstate-io-buidl-一站式区块链开发工具&#34;&gt;关于&lt;a href=&#34;https://www.secondstate.io/buidl/&#34;&gt;BUIDL IDE&lt;/a&gt; —— 一站式区块链开发工具&lt;/h2&gt;

&lt;p&gt;BUIDL IDE是完全基于浏览器的集成开发工具，开发者可以用BUIDL轻松地创建和部署区块链应用（DApp），无需安装任何软件和区块链钱包，从而节省大量时间。&lt;/p&gt;

&lt;p&gt;BUIDL 功能介绍：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内置账户管理系统，不需钱包软件；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;编写，编译和部署智能合约；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发包含HTML5 和 JavaScript 的DApp；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一键把DApp发布到 Github Pages&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;可以部署在以太坊和任何与以太坊兼容的区块链；&lt;/li&gt;
&lt;li&gt;访问内置Web3库；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持基于规则的智能合约；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置基于ElasticSearch 的实时智能合约搜索引擎；&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多资料：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BUIDL 介绍页
&lt;a href=&#34;https://www.secondstate.io/buidl/&#34;&gt;https://www.secondstate.io/buidl/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BUIDL IDE
&lt;a href=&#34;https://buidl.secondstate.io/&#34;&gt;https://buidl.secondstate.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BUIDL 文档
&lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/getting-started&#34;&gt;https://docs.secondstate.io/buidl-developer-tool/getting-started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BUIDL GitHub 代码
&lt;a href=&#34;https://github.com/second-state&#34;&gt;https://github.com/second-state&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>The Next Generation Ethereum Virtual Machine — Ewasm VM</title>
      <link>http://blog.secondstate.io/post/20191106-ewasm-en/</link>
      <pubDate>Wed, 06 Nov 2019 10:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191106-ewasm-en/</guid>
      
        <description>

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191106-Ewasm-01.png&#34; alt=&#34;&#34; /&gt;
The next generation Ethereum Virtual Machine — Crosslink 2019 Taiwan&lt;/p&gt;

&lt;p&gt;This is a wrap-up for Second State’s VP of Engineering, &lt;a href=&#34;https://github.com/hydai&#34;&gt;Mr. Hung-Ying Tai&lt;/a&gt;’s presentation on SOLL, Ewasm VM&amp;rsquo;s current research content and future direction. The sharing is very exciting, including content on EVM bytecode, Webassembly, Ewasm1.0 and Ewasm2.0&lt;/p&gt;

&lt;h3 id=&#34;evm-bytecode-and-webassembly-wasm&#34;&gt;EVM bytecode and Webassembly (WASM)&lt;/h3&gt;

&lt;p&gt;When Ethereum&amp;rsquo;s smart contract transaction is executed, for example, when transfer Token to another address, we read the EVM bytecode into the Ethereum virtual machine, and the EVM bytecode has the following characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;256-bit stack-based virtual machine&lt;/li&gt;
&lt;li&gt;Too many high level instructions
  Storage(SSTORE, SLOAD)
  SHA3(keccak-256)
  Call, Create Contract…&lt;/li&gt;
&lt;li&gt;Different from the actual machine architecture (usually &lt;sup&gt;32&lt;/sup&gt;&amp;frasl;&lt;sub&gt;64&lt;/sub&gt; bit), and 256 bit need to be done by simulation&lt;/li&gt;
&lt;li&gt;Less language support (Vyper, Solidity, &amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Webassembly (WASM) is a binary programming language that allows suites developed in different programming languages to be used in browsers. WASM has the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stack-based virtual machine:
has locals ( ~= register or memory)
only access top 3 items from stack v.s EVM’s 16&lt;/li&gt;
&lt;li&gt;Support for 32 / 64 bit operations&lt;/li&gt;
&lt;li&gt;No high-level instruction&lt;/li&gt;
&lt;li&gt;RISC Instruction Set, can map to a common CPU ISA&lt;/li&gt;
&lt;li&gt;Large community power
Supported in all major browser
Lots of language support (C++, Rust, …)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ewasm-1-0&#34;&gt;Ewasm 1.0&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the features of Ewasm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ewasm is a subset of wasm&lt;/li&gt;
&lt;li&gt;Floating point arithmetic is not supported because no error is allowed&lt;/li&gt;
&lt;li&gt;You can only import the library of Ethereum and avoid importing ㄒ system library.&lt;/li&gt;
&lt;li&gt;Insert useGAS before each instruction to calculate the cost of GAS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ethereum-environment-interface&#34;&gt;Ethereum Environment Interface&lt;/h3&gt;

&lt;p&gt;There are many high-level instructions in the EVM like SSLOAD and SHA3. These commands are in Ewasm 1.0. because WASM can dynamically read libraries (modules). Ethereum defines the Ethereum Environment Interface so that clients can use different languages. Corresponding to the library, and it is easier to complete the prototype and upgrade.&lt;/p&gt;

&lt;p&gt;The following slide is a list of functions defined by the Ethereum Environment Interface.
&lt;img src=&#34;http://blog.secondstate.io/images/20191106-Ewasm-02.png&#34; alt=&#34;&#34; /&gt;
Ethereum Environment Interface Definition.&lt;/p&gt;

&lt;h3 id=&#34;how-to-remove-illegal-instructions&#34;&gt;How to remove illegal instructions?&lt;/h3&gt;

&lt;p&gt;Ewasm uses system contract to remove illegal instructions and add useGas bytecode, such as floating point numbers or illegal imports, in two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check the contract&amp;rsquo;s bytecode using the system contract&lt;/li&gt;
&lt;li&gt;Like the current precompiles running on the client, check the contract before deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following slide shows the Ewasm 1.0 stack. Before the contract deployment, the Ewasm bytecode will be checked by Sentinal. After the successful deployment, the client will communicate with Heru (Wasm Engine) through EVM-C if the contract is to be executed.
&lt;img src=&#34;http://blog.secondstate.io/images/20191106-Ewasm-03.png&#34; alt=&#34;&#34; /&gt;
Ewasm Stack&lt;/p&gt;

&lt;h3 id=&#34;performance-problem&#34;&gt;Performance problem&lt;/h3&gt;

&lt;p&gt;Does Ewasm perform better? The speaker shared the results of both EVM execution of Sha1 and BN128mul. It can be found that EVM is the faster when running BN128mul, mainly because WASM only supports &lt;sup&gt;32&lt;/sup&gt;&amp;frasl;&lt;sub&gt;64&lt;/sub&gt;-bit operations. For 256-bit it requires additional simulation (ONE 256 bit operations may be replaced by 25 64 bit operations). As EVM provides precompiles, Wasm engine can support &lt;code&gt;bignum&lt;/code&gt; library to speed up.&lt;/p&gt;

&lt;h2 id=&#34;ewasm-2-0&#34;&gt;Ewasm 2.0&lt;/h2&gt;

&lt;p&gt;Ewasm 2.0&amp;rsquo;s smart contract is called Execution Environments (EE), which is different from Ewasm 1.0.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EE is all written by WASM&lt;/li&gt;
&lt;li&gt;Because of the cross shard support, each EE is executed on a shard&lt;/li&gt;
&lt;li&gt;EE can only get state root, and the execution of the contract is not the same as before.&lt;/li&gt;
&lt;li&gt;EE is stateless&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following slide shows the ERC20 Token compared to Ewasm 2.0 and Ewasm 1.0 storage. Ewasm 1.0 has a corresponding key for each data, while Ewasm 2.0 only has state root, so it can only interact with state root.
&lt;img src=&#34;http://blog.secondstate.io/images/20191106-Ewasm-04.png&#34; alt=&#34;&#34; /&gt;
Ewasm 2.0 vs Ewasm 1.0&lt;/p&gt;

&lt;h2 id=&#34;phase-one-and-done&#34;&gt;Phase One and Done&lt;/h2&gt;

&lt;p&gt;At the current stage of Ewasm 2.0 to phase one and done, there are also tested networks that can perform EE on shard blocks, and Ethereum also has open source Ewasm 2.0 test tool: Scout.
&lt;img src=&#34;http://blog.secondstate.io/images/20191106-Ewasm-05.png&#34; alt=&#34;&#34; /&gt;
Hello World for Ewasm 2.0&lt;/p&gt;

&lt;p&gt;The above slide is Eth 2&amp;rsquo;s Hello World EE. You can see that the first line in the main function reads the pre state root, then verify if the block data size is 0, and finally save the state root back. Eth 2&amp;rsquo;s smart contract code are all in this form.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Ewasm 1.0 currently supports EVM 1 and most of the functions have a test net. Second state develops a compiler SOLL, which can compile solidity into Ewasm. &lt;a href=&#34;https://blog.secondstate.io/post/20191022-soll-compiler-project/&#34;&gt;Check it out&lt;/a&gt; if interested.&lt;/p&gt;

&lt;p&gt;Ewasm 2.0 is still under study. The following slide is the direction of the research and contribution shared by the speaker.
&lt;img src=&#34;http://blog.secondstate.io/images/20191106-Ewasm-06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;1.&lt;a href=&#34;http://url.hyd.ai/LRFVT&#34;&gt;Crosslink 简报&lt;/a&gt;
2.&lt;a href=&#34;https://webassembly.org/&#34;&gt;webassembly.org (http://webassembly.org/)&lt;/a&gt;
3.&lt;a href=&#34;https://github.com/ewasm/scout&#34;&gt;Scout&lt;/a&gt;
4.&lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;Second State’s Soll Compiler&lt;/a&gt;
5.&lt;a href=&#34;https://www.youtube.com/watch?v=X-A6sP_HTy0&#34;&gt;Compiling and deploying an ERC20 contract onto the eWASM testnet— YouTube&lt;/a&gt;
6.&lt;a href=&#34;https://www.youtube.com/watch?v=YW6hszjjMqo&amp;amp;feature=youtu.be&#34;&gt;Ewasm overview and the precompile problem: Alex Beregszaszi and Casey Detrio @ Ethereum \\ Part 1 — YouTube&lt;/a&gt;
7.&lt;a href=&#34;https://www.youtube.com/watch?v=a9hbycBMr_A&#34;&gt;Ewasm overview and the precompile problem: Alex Beregszaszi and Casey Detrio @ Ethereum \\ Part 2 — YouTube&lt;/a&gt;
8.&lt;a href=&#34;https://www.youtube.com/watch?v=iwU10WkWSBY&#34;&gt;Wasm for blockchain&amp;amp;Eth2 execution: Paul Dworzanski,Alex Beregszaszi,Casey Detrio@Ethereum \\ Part 2 — YouTube&lt;/a&gt;
9.&lt;a href=&#34;https://drive.google.com/file/d/19t4qCqEK2RPt0p1XYx-a2FdZSAlCq7H0/view&#34;&gt;Ewasm for sharding&lt;/a&gt;
10.&lt;a href=&#34;https://drive.google.com/file/d/1CRc0qBQTebNKw7NRZXzxbHovrigW0bqf/view&#34;&gt;Ewasm updates&lt;/a&gt;
11.&lt;a href=&#34;https://github.com/ewasm/design&#34;&gt;Ewasm design&lt;/a&gt;
12.&lt;a href=&#34;https://rsms.me/wasm-intro&#34;&gt;wasm-intro&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Translated from &lt;a href=&#34;https://medium.com/taipei-ethereum-meetup/the-next-generation-ethereum-virtual-machine-ewasm-vm-2fe3fd9b94a4&#34;&gt;traditional Chinese&lt;/a&gt; by Ethereum Taipei&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Ewasm Vs EVM：Ewasm 带来了什么改变？</title>
      <link>http://blog.secondstate.io/post/20191106-ewasm-zh/</link>
      <pubDate>Wed, 06 Nov 2019 09:42:14 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191106-ewasm-zh/</guid>
      
        <description>

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191106-Ewasm-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这篇文章是 Crosslink 2019 Taiwan 的一个议程纪录：The next generation Ethereum Virtual Machine，由来自&lt;a href=&#34;https://www.secondstate.io/&#34;&gt;Second State&lt;/a&gt; 的工程VP Hung-Ying Tai（hydai） 分享 Ewasm VM 目前研究内容及未来的方向，内容非常精彩，包含了 EVM bytecode 、Webassembly、Ewasm1.0 以及 Ewasm2.0 。&lt;/p&gt;

&lt;h2 id=&#34;evm-bytecode-及webassembly-wasm&#34;&gt;EVM bytecode 及Webassembly（WASM）&lt;/h2&gt;

&lt;p&gt;以太坊的智能合约交易在执行时，例如：把Token 转到别的地址，是将EVM bytecode 读进以太坊的虚拟机执行，而 EVM bytecode 有以下几点特色：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;256 位元且堆叠式（staked-based）的虚拟机&lt;/li&gt;
&lt;li&gt;很多高阶的指令，例如：SSTORE, SLOAD, SHA3, EC, Call/Create contract&lt;/li&gt;
&lt;li&gt;与实体系统架构（通常是 &lt;sup&gt;32&lt;/sup&gt;&amp;frasl;&lt;sub&gt;64&lt;/sub&gt; 位）有差异，而 256 位则需要靠模拟来完成&lt;/li&gt;
&lt;li&gt;较少程序语言（Vyper, Solidity, …）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Webassembly（WASM）是为了让不同程序语言开发的套件都能在浏览器使用的一种二进制程序语言，WASM 有以下几点特色：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;堆叠式（staked-based）的虚拟机：有独立的区域空间（暂存器或是内存），存取堆叠前3 个物件（EVM 存取 16 个）&lt;/li&gt;
&lt;li&gt;支持32 / 64 位的操作&lt;/li&gt;
&lt;li&gt;没有高阶的指令&lt;/li&gt;
&lt;li&gt;RISC 指令集也可以对应到CPU ISA&lt;/li&gt;
&lt;li&gt;较大的社群：主流的浏览器都支持，也有较多的程序语言（C++, Rust, GO, …）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ewasm-1-0&#34;&gt;Ewasm 1.0&lt;/h2&gt;

&lt;p&gt;接下来看看以太坊Ewasm 的特性：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ewasm 是wasm 的子集合&lt;/li&gt;
&lt;li&gt;因为不能有误差，所以不支持浮点数运算&lt;/li&gt;
&lt;li&gt;只能import 以太坊的函式库，避免 importㄒ系统函式库&lt;/li&gt;
&lt;li&gt;在每段指令之前插入useGAS 来计算 GAS 的花费&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;以太坊环境接口-eei&#34;&gt;以太坊环境接口（EEI）&lt;/h3&gt;

&lt;p&gt;EVM 里有很多像是SSLOAD, SHA3 的高阶指令，这些指令在Ewasm 1.0 里，因为 WASM 可以动态读取函式库（模组），以太坊定义了以太坊环境接口(EEI)，让客户端可以用不同的语言实现相对应的函式库，而且也更容易完成 prototype 跟升级。&lt;/p&gt;

&lt;p&gt;下图是 Ethereum Environment Interface 定义的函数列表。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191106-Ewasm-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;如何移除非法的指令&#34;&gt;如何移除非法的指令？&lt;/h3&gt;

&lt;p&gt;Ewasm 使用 system contract 移除非法指令以及加入 useGas 的 bytecode，像是浮点数或是非法的 import，有以下两种做法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用 system contract 检查合约的 bytecode&lt;/li&gt;
&lt;li&gt;像目前的 precompiles 运行在客户端上，在部署前先检查合约&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下图是 Ewasm 1.0 的 stack，在部署合约前 Ewasm bytecode 会先经过 Sentinal 的检查，成功部署后客户端如果要执行合约会通过 EVM-C 与 Heru（Wasm Engine）沟通。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191106-Ewasm-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;效能问题&#34;&gt;效能问题&lt;/h3&gt;

&lt;p&gt;使用Ewasm 效能真的会比较快吗？Second State 的Hydai 分享了各个EVM 执行 Sha1 以及 BN128mul 的结果，发现EVM 在运行 BN128mul 时会是最快，主要是因为WASM 支持 32 / 64 位的操作，256 位则需要另外模拟（1 个 256 位元的运算可以换成 25 个 64 位元的运算），所以WASM 在跑 BN128mul 时会比较慢。&lt;/p&gt;

&lt;h2 id=&#34;ewasm-2-0&#34;&gt;Ewasm 2.0&lt;/h2&gt;

&lt;p&gt;Ewasm 2.0 的智能合约改叫 Execution Environments（EE），与 Ewasm 1.0 不一样的有下列几点&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;EE 全部都是 WASM 写的&lt;/li&gt;
&lt;li&gt;因为支持 cross shard，每个 EE 都是在一个 shard 上执行&lt;/li&gt;
&lt;li&gt;EE 只能拿到 state root，而在合约的执行写法也跟原来不一样&lt;/li&gt;
&lt;li&gt;EE 是 stateless&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下图可以看到ERC20 Token 在Ewasm 2.0 跟Ewasm 1.0 storage 的比较，Ewasm 1.0 每个数据都会有相对应的 key，而Ewasm 2.0 只有存 state root，所以只能跟 state root 互动。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191106-Ewasm-04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;phase-one-and-done&#34;&gt;Phase One and Done&lt;/h2&gt;

&lt;p&gt;目前 Ewasm 2.0 到 phase one and done 的阶段，也有测试的网络可以在 shard block 执行 EE，以太坊也有开源 Ewasm 2.0 的测试工具 &lt;a href=&#34;https://github.com/ewasm/scout&#34;&gt;Scout&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191106-Ewasm-05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上图是Eth 2 的 Hello World EE，可以看到main 函数里第一行读取pre state root，接下来验证block data size 是不是为 0，最后再将state root 存回去，Eth 2 的智能合约写起来都会像这样。&lt;/p&gt;

&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;

&lt;p&gt;Ewasm 1.0 目前已经支持 EVM 1 大部分的功能，Ewasm 也有测试链了，Second State 开发了一个编译器&lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;SOLL&lt;/a&gt;，能将 Solidity 编译成 Ewasm，对Ewasm 感兴趣的人&lt;a href=&#34;https://blog.secondstate.io/post/20191022-soll-compiler-project-zh/&#34;&gt;可以参考一下&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Ewasm 2.0 目前还在研究中，下图是Hydai给大家分享的研究及贡献的方向。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191106-Ewasm-06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://url.hyd.ai/LRFVT&#34;&gt;Crosslink 简报&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://webassembly.org/&#34;&gt;webassembly.org (http://webassembly.org/)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ewasm/scout&#34;&gt;Scout&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;Second State’s Soll Compiler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=X-A6sP_HTy0&#34;&gt;Compiling and deploying an ERC20 contract onto the eWASM testnet— YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=YW6hszjjMqo&amp;amp;feature=youtu.be&#34;&gt;Ewasm overview and the precompile problem: Alex Beregszaszi and Casey Detrio @ Ethereum \\ Part 1 — YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a9hbycBMr_A&#34;&gt;Ewasm overview and the precompile problem: Alex Beregszaszi and Casey Detrio @ Ethereum \\ Part 2 — YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=iwU10WkWSBY&#34;&gt;Wasm for blockchain&amp;amp;Eth2 execution: Paul Dworzanski,Alex Beregszaszi,Casey Detrio@Ethereum \\ Part 2 — YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/19t4qCqEK2RPt0p1XYx-a2FdZSAlCq7H0/view&#34;&gt;Ewasm for sharding&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1CRc0qBQTebNKw7NRZXzxbHovrigW0bqf/view&#34;&gt;Ewasm updates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ewasm/design&#34;&gt;Ewasm design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://rsms.me/wasm-intro&#34;&gt;wasm-intro&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Second State(第二形科技) 亮相世界级区块链技术盛会旧金山区块链周</title>
      <link>http://blog.secondstate.io/post/20191031-sfbw-zh/</link>
      <pubDate>Thu, 31 Oct 2019 20:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191031-sfbw-zh/</guid>
      
        <description>&lt;p&gt;备受瞩目的世界级区块链技术盛会-旧金山区块链周于当地时间10月28日拉开帷幕，区块链基础软件技术公司Second State(第二形科技) 赞助了本届旧金山区块链周。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191031-SFBW-01.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Second State(第二形科技) 成立于2019年2月，为公链和企业联盟链提供区块链基础设施，目前已发布多款区块链相关产品：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;下一代基于WASM的区块链智能合约执行引擎&lt;/li&gt;
&lt;li&gt;基于LLVM的多语言区块链智能合约编译器&lt;/li&gt;
&lt;li&gt;区块链应用程序的集成开发环境BUIDL&lt;/li&gt;
&lt;li&gt;高性能的完整联盟链解决方案&lt;/li&gt;
&lt;li&gt;为智能合约定制的搜索引擎&lt;/li&gt;
&lt;li&gt;服务端的高性能WASM虚拟机&lt;/li&gt;
&lt;li&gt;区块链技术培训与实验室&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;值得一提的是，Second State(第二形科技) 是世界上首个做出Ewasm（以太坊下一代智能合约引擎）编译器的公司，并因此受到以太坊基金会的嘉奖，受到行业广泛好评。&lt;/p&gt;

&lt;p&gt;Second State(第二形科技) 本次深度参与旧金山区块链周，在国际舞台上与国内外优质区块链公司共同探讨区块链技术如何赋能产业，以加快推动区块链技术和产业创新发展。&lt;/p&gt;

&lt;p&gt;旧金山区块链周活动涵盖来自世界各地的区块链初创公司、企业公司、学者、开发人员和投资者，参与者包括来自美国证券交易委员会的 Hester M.Peirce、以太坊创始人 Vitalik Buterin、Kraken 创始人兼 CEO Jesse Powell、ConsenSys 创始人兼 CEO Joseph Lubin 等重要嘉宾，当然也不少了来自中国的优秀公司：比大陆创始人吴忌寒、Second State(第二形科技) 创始人Michael Yuan 博士。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Celebrate Halloween with Blockchain Smart Contract</title>
      <link>http://blog.secondstate.io/post/20191031-halloween/</link>
      <pubDate>Thu, 31 Oct 2019 10:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191031-halloween/</guid>
      
        <description>

&lt;p&gt;Halloween is finally here! Are you ready for the spookiest night of the year?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://secondstate.io/buidl&#34;&gt;BUIDL IDE  tools&lt;/a&gt; now has an upgraded UI just for Halloween. Trick or treat! A spooky pumpkin on the top welcomes you to the BUIDL’s Halloween.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191031-halloween-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now, for developers, can you tell what the following code is for?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;pragma lity ^1.2.4;

contract Halloween {
    
  function greet() pure public returns (string) {
    return &amp;#34;Happy Halloween&amp;#34;;
  }
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is a very simple (yet spooky) smart contract example, just like the “Hello World” on the internet.&lt;/p&gt;

&lt;p&gt;Let’s figure out how it works.&lt;/p&gt;

&lt;h3 id=&#34;start-coding&#34;&gt;Start coding&lt;/h3&gt;

&lt;h4 id=&#34;step-1&#34;&gt;Step 1&lt;/h4&gt;

&lt;p&gt;Open the BUIDL IDE tool in any browser. &lt;a href=&#34;http://buidl.secondstate.io/&#34;&gt;http://buidl.secondstate.io/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;step-2&#34;&gt;Step 2&lt;/h4&gt;

&lt;p&gt;Check the &lt;strong&gt;Providers&lt;/strong&gt; tab on the left panel. The icon, if green, means BUIDL IDE is connected to the Second State DevChain. Please refresh the page if the icon is red.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191031-Halloween-04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;step-3&#34;&gt;Step 3&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;3.1&lt;/em&gt; Clear the content in the &lt;strong&gt;contract&lt;/strong&gt; editor section of BUIDL.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;3.2&lt;/em&gt; Copy and paste the following code to the &lt;strong&gt;contract&lt;/strong&gt; section&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;pragma lity ^1.2.4;

contract Halloween {
    
  function greet() pure public returns (string) {
    return &amp;#34;Happy Halloween&amp;#34;;
  }
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;3.3&lt;/em&gt; Click on &lt;strong&gt;Compile&lt;/strong&gt; and you will see the following. Then click on &lt;strong&gt;deploy on chain&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191031-Halloween-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The contract is now deployed on the DevChain, and you could see the Contract Name , TX and Address on the left tab. (TX records this transaction and it is unique. So is the contract address.)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;3.4&lt;/em&gt; Now click open the &lt;strong&gt;Halloween&lt;/strong&gt; contract, and click on the &lt;strong&gt;Call&lt;/strong&gt; button to call its &lt;code&gt;greeting()&lt;/code&gt; function. In the LOG window, you will see “Happy Halloween”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191031-halloween-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it. Happy Halloween on the blockchain!&lt;/p&gt;

&lt;h3 id=&#34;about-buidl-ide-tools&#34;&gt;About BUIDL IDE tools&lt;/h3&gt;

&lt;p&gt;BUIDL is a browser-based IDE that enables developers to create and deploy Decentralized Applications (DApps) on blockchains with ease.‪You can #compile, test, and deploy inside a browser. No software download!‬&lt;/p&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.secondstate.io/buidl&#34;&gt;BUIDL Introduction&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/getting-started&#34;&gt;BUIDL Documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.secondstate.io/&#34;&gt;Second State - Middleware for smart contracts&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Diving into Ethereum&#39;s Virtual Machine(EVM): the future of Ewasm</title>
      <link>http://blog.secondstate.io/post/20191029-ewasm/</link>
      <pubDate>Tue, 29 Oct 2019 20:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191029-ewasm/</guid>
      
        <description>

&lt;p&gt;Ethereum is a blockchain with a built-in Turing-complete programming language. It allows anyone to create a decentralised application, by making use of Ethereum smart contracts.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The Ethereum Virtual Machine (EVM) is the part of Ethereum that handles smart contract deployment and execution” (Antonopoulos and Wood, 2018).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The EVM consists of a stack-based architecture. In order for a smart contract to be deployed, all high level Ethereum smart contract code must first be compiled into machine-readable code (called bytecode). This bytecode code (a series of single-byte opcodes and optional arguments) is then processed by the EVM via a last-in-first-out stack arrangement. This operation is similar to the Java Virtual Machine (JVM) whereby every instruction begins with a single-byte opcode and arguments, if any, occupy subsequent (unaligned) bytes, with values given in big-endian order (Scott, 2009).&lt;/p&gt;

&lt;p&gt;The first goal of this article is to explain the inner workings of Ethereum’s stack-based EVM. Once these EVM fundamentals are explained we will begin to see that Ethereum’s organic conformity to the binary instruction format for a stack-based virtual machine has it poised to transition into the bright future of web assembly.&lt;/p&gt;

&lt;p&gt;Let’s start with the end in mind by taking a look at web assembly.&lt;/p&gt;

&lt;h2 id=&#34;web-assembly-abbreviated-wasm&#34;&gt;Web Assembly (abbreviated Wasm)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt; (abbreviated Wasm) is a new type of code that can be run in modern web browsers. It provides new features and major gains in performance. Wasm is designed to be an effective compilation target for low-level source languages like C, C++ and Rust etc (MDN Web Docs, 2019).&lt;/p&gt;

&lt;h2 id=&#34;ethereum-web-assembly-abbreviated-ewasm&#34;&gt;Ethereum Web Assembly (abbreviated Ewasm)&lt;/h2&gt;

&lt;p&gt;Ethereum Web Assembly (abbreviated Ewasm) is a deterministic smart contract execution engine built on the modern, standard WebAssembly virtual machine. Ewasm is the primary candidate to replace the EVM as part of the Ethereum 2.0 “Serenity” roadmap. Ewasm is also proposed for adoption on the Ethereum mainnet (ewasm, 2019).&lt;/p&gt;

&lt;h2 id=&#34;why-ewasm&#34;&gt;Why Ewasm?&lt;/h2&gt;

&lt;p&gt;The current architecture of the EVM is one of the greatest blockers to raw performance (GitHub EIP48, 2019). For example, whilst the 256-bit word size facilitates native hashing and elliptic curve operations (Antonopoulos and Wood, 2018), it also makes translation from EVM opcodes to hardware instructions more difficult than needed; an architecture that provides a closer mapping to hardware will considerably enhance Ethereum’s performance (GitHub EIP48, 2019).&lt;/p&gt;

&lt;p&gt;Aside from the performance enhancement aspect, one of the design goals of the Ewasm project is to also support smart contract development across a wider range of languages and tooling i.e. incorporating LLVM, C, C++, Rust, JavaScript into the development cycle.
In theory any language, that can be compiled to Wasm, can be used to write a smart contract. As long as it implements the &lt;a href=&#34;https://github.com/ewasm/design/blob/master/contract_interface.md&#34;&gt;Ewasm Contract Interface&lt;/a&gt;(ECI) and &lt;a href=&#34;https://github.com/ewasm/design/blob/master/eth_interface.md&#34;&gt;Ethereum Environment Interface&lt;/a&gt;(EEI) (ewasm, 2019).&lt;/p&gt;

&lt;h2 id=&#34;smart-contracts&#34;&gt;Smart Contracts&lt;/h2&gt;

&lt;p&gt;Let’s take a minute to understand the fundamentals of the EVM by walking through the creation, compilation and deployment of an Ethereum smart contract, using the original EVM architecture.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ethereum smart contracts are like “autonomous agents” that live inside of the Ethereum execution environment, always executing a specific piece of code when “poked” by a message or transaction, and having direct control over their own ether balance and their own key/value store to keep track of persistent variables (Buterin, 2013).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each of the higher level smart contract source programming languages such as &lt;a href=&#34;https://solidity.readthedocs.io/en/v0.5.12/&#34;&gt;Solidity&lt;/a&gt;, &lt;a href=&#34;https://vyper.readthedocs.io/en/v0.1.0-beta.13/&#34;&gt;Vyper&lt;/a&gt; and &lt;a href=&#34;https://github.com/second-state/lity&#34;&gt;Lity&lt;/a&gt; maintain their own compiler. A smart contract’s source code can be compiled into a variety of outputs. Including, but not limited to the application binary interface (ABI), bytecode stream and opcode.&lt;/p&gt;

&lt;h2 id=&#34;compiling&#34;&gt;Compiling&lt;/h2&gt;

&lt;p&gt;Before installing a compiler on your local machine, I would urge you to check out new web-based compilers such as &lt;a href=&#34;http://buidl.secondstate.io/&#34;&gt;SecondState’s BUIDL environment&lt;/a&gt;. &lt;strong&gt;This will save you an incredible amount of time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take &lt;a href=&#34;https://gist.github.com/tpmccallum/bb077c0768631873708b4000a693dde7&#34;&gt;the simple storage source&lt;/a&gt; code and compile it using SecondState’s BUIDL environment, as pictured below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking the compile button will immediately produce the smart contract’s ABI and bytecode, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you would like to see how this compilation is performed in the command line (with a locally installed compiler), please see &lt;strong&gt;Appendix A&lt;/strong&gt;, at the end of this article.&lt;/p&gt;

&lt;h2 id=&#34;analysing-the-deployment-bytecode&#34;&gt;Analysing the deployment bytecode&lt;/h2&gt;

&lt;p&gt;If we look at the first 4 instructions in the bytecode we see the following.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;60&lt;/strong&gt;80&lt;strong&gt;60&lt;/strong&gt;40&lt;strong&gt;5234&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we view the Mnemonic representations of these values, as referenced on page 30 of the &lt;a href=&#34;https://ethereum.github.io/yellowpaper/paper.pdf&#34;&gt;Ethereum Yellow Paper&lt;/a&gt;, we will see that the first instruction (60) is PUSH1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;δ&#34;&gt;δ&lt;/h3&gt;

&lt;p&gt;The column labelled &lt;strong&gt;δ&lt;/strong&gt; to the right of Mnemonic, represents the number of items to be removed from the stack by the PUSH1 instruction (in this case 0).&lt;/p&gt;

&lt;h3 id=&#34;α&#34;&gt;α&lt;/h3&gt;

&lt;p&gt;The next column over, labelled &lt;strong&gt;α&lt;/strong&gt;, represents the number of additional items to be placed on the stack, by the PUSH1 instruction. In this case 1; a single byte 0x80.&lt;/p&gt;

&lt;p&gt;In the example below we can now see that the first instruction (0x60) PUSH1, has pushed the value of 0x80 to the stack and that the second instruction (0x60) called PUSH1, has pushed the value of 0x40 to the stack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;60&lt;/strong&gt;80&lt;strong&gt;60&lt;/strong&gt;40…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PUSH1&lt;/strong&gt; 0x80 &lt;strong&gt;PUSH1&lt;/strong&gt; 0x40…&lt;/p&gt;

&lt;p&gt;If we move along the bytecode, we then encounter the instruction with a value of 0x52. As you can see in the Yellow Paper below, this instruction has the Mnemonic representation of MSTORE.&lt;/p&gt;

&lt;p&gt;60806040&lt;strong&gt;52&lt;/strong&gt;34&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we again look at the column labelled &lt;strong&gt;δ&lt;/strong&gt; to the right of Mnemonic we can see that MSTORE is going to consume two items from the top of the stack. In total, MSTORE will consume the top 2 items from the stack but place 0 items back on the stack.&lt;/p&gt;

&lt;p&gt;It is important to point out, at this stage, that MSTORE is a Memory Operation which is tasked with saving a word to memory. Please don’t get confused about the use of the term “word”.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The EVM works with a word size of 256 bit (Antonopoulos and Wood, 2018).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This “word” is not a word per se. For example, it can be an account address etc.&lt;/p&gt;

&lt;p&gt;MSTORE starts its operation by first consuming the current item from the top of the stack; namely an address which specifies where the word will be stored in memory. In this case the address location of 0x60. MSTORE then consumes the next item from the stack and saves it (0x80) to the pre-specified address(0x60). At this stage there are no items left on the stack.&lt;/p&gt;

&lt;p&gt;The next instruction is (0x34). It has the Mnemonic representation of CALLVALUE.&lt;/p&gt;

&lt;p&gt;60806040&lt;strong&gt;5234&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we pay close attention to the column labelled α, we see that CALLVALUE will be placing one item on the stack, as part of its standard operation. However, we did just mentioned that the stack is currently empty and so this raises the following question. How does CALLVALUE obtain the data which it intends to place on the stack?&lt;/p&gt;

&lt;p&gt;As you can see from the Yellow Paper, all instructions which have values in the 30s (0x30 to 0x3e) relate to Environmental Information. In this case CALLVALUE obtains its required data from the message call responsible for executing this bytecode. Another example relating to Environmental Information is the instruction 0x33 which has the Mnemonic representation of CALLER. The CALLER instruction is able to automatically get the address of the Ethereum account which initiated the bytecode’s execution.&lt;/p&gt;

&lt;h2 id=&#34;deployment-vs-runtime-bytecode&#34;&gt;Deployment vs Runtime bytecode&lt;/h2&gt;

&lt;p&gt;It is important to differentiate between the deployment and runtime bytecode at this juncture. If you look at Appendix A.1 (obtaining deployment bytecode) and Appendix A.2 (obtaining runtime bytecode) you will notice that the bytecode results, which are returned, are not identical.&lt;/p&gt;

&lt;p&gt;The runtime bytecode is the bytecode that is executed when functions of the deployed smart contract are called.&lt;/p&gt;

&lt;p&gt;The deployment bytecode contains additional instructions, relating specifically to deployment only.&lt;/p&gt;

&lt;p&gt;Interestingly, the runtime bytecode can always be seen as a subset of code, which resides verbatim inside the deployment bytecode. This is illustrated in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;analysing-the-runtime-bytecode&#34;&gt;Analysing the runtime bytecode&lt;/h2&gt;

&lt;p&gt;Each of the smart contract functions can be identified (inside the runtime bytecode) as a 4 byte function signature. To calculate the function signature we first take the function’s name. In our case, let’s start with our function “set”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Along with the function name “set”, we also take the function’s input argument data types (separated by comma and wrapped in parentheses). For example, in our simple case we end up with the text set(uint256).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: Do not use any spaces when creating the function selector text.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once we have this information we then create the hexadecimal representation of a sha3 hash and truncate it to only 4 bytes. Here are examples in both web3.js and web3.py&lt;/p&gt;

&lt;p&gt;&lt;code&gt;selectorHash = &amp;quot;0x&amp;quot; + str(web3.toHex(web3.sha3(text=&amp;quot;set(uint256)&amp;quot;)))[2:10]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var selectorHash = web3.sha3(&amp;quot;set(uint256)&amp;quot;).substring(0,10)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Both of the above commands will return the following signature 0x60fe47b1 which we can easily locate in both the deployment and runtime bytecode data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this stage we have an understanding of how each instruction in the bytecode is carried out (giving and taking information from the stack, then calling environment and memory etc). We could continue to analyse each instruction in the bytecode and reference the Yellow Paper. However, we now have a good understanding of how calling code can execute state transition functions using environmental information and so forth so let’s now move on to Ethereum’s specific Ewasm implementation nuances.&lt;/p&gt;

&lt;h2 id=&#34;ewasm-implementation&#34;&gt;Ewasm implementation&lt;/h2&gt;

&lt;p&gt;We mentioned a little while ago that a smart contract’s source code can be compiled into a variety of outputs. Of course the path from high level smart contract code to Ewasm is a complex task which can take on many and varied compilation paths through different toolchains.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.secondstate.io/&#34;&gt;Second State&lt;/a&gt; developers recently built &lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;a Solidity to Ewasm compiler called Soll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This challenging task was completed (as a prototype for demonstration purposes) prior to both:
* &lt;a href=&#34;https://crosslink.taipei/&#34;&gt;Crosslink&lt;/a&gt; - a conference for the world&amp;rsquo;s leading blockchain researchers and developers, held in Taiwan&amp;rsquo;s capital, Taipei)
* &lt;a href=&#34;https://devcon.org/&#34;&gt;Devcon5&lt;/a&gt;- an international conference for Ethereum developers, held in Osaka Japan)&lt;/p&gt;

&lt;h2 id=&#34;crosslink-october-2019&#34;&gt;Crosslink (October 2019)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Picture: SecondState&amp;rsquo;s Hung-Ying Tai receiving an Ethereum Foundation Grant for the &lt;a href=&#34;https://blog.secondstate.io/post/20191022-soll-compiler-project/&#34;&gt;Soll compiler project&lt;/a&gt; (pictured with Vitalik Buterin at the Crosslink Taipei event).&lt;/p&gt;

&lt;h2 id=&#34;devcon5-october-2019&#34;&gt;Devcon5 (October 2019)&lt;/h2&gt;

&lt;p&gt;For those who were not at Devcon5, the following video provides an overview of Soll’s operation. Namely deploying and interacting with an Ethereum ERC20 Solidity smart contract on the new &lt;a href=&#34;http://ewasm.ethereum.org/&#34;&gt;Ethereum Ewasm testnet&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/X-A6sP_HTy0&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Devcon5 was the perfect conference to share the latest Ewasm developments from the SecondState team. After formally presenting on the first day of the conference, an additional informal and open demonstration &amp;amp; discussion took place.&lt;/p&gt;

&lt;p&gt;The post-demo discussion with Solidity maintainer Christian Reitwiessner, and others, revealed SecondState’s best path forward in terms of optimal collaboration and reduction of duplication of effort amongst different developers and software projects in the future Ewasm space.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Having succeeded in prototyping compilation from &lt;strong&gt;Solidity&lt;/strong&gt; to &lt;strong&gt;LLVM&lt;/strong&gt; to &lt;strong&gt;Ewasm&lt;/strong&gt;, SecondState, in response to valuable peer input, is looking forward to making extensive use of &lt;a href=&#34;https://solidity.readthedocs.io/en/v0.5.12/yul.html&#34;&gt;Yul&lt;/a&gt; in a bid to perform Yul to llvm to Ewasm compilation path.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-13.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;yul&#34;&gt;Yul&lt;/h2&gt;

&lt;p&gt;Yul is an Ethereum specific intermediate language. Future versions of the Ethereum Solidity compiler (and possibly the Ethreum Vyper compiler) will comprehensively support Yul as an intermediate language.&lt;/p&gt;

&lt;p&gt;Yul is designed to be a usable common denominator of EVM 1.0, EVM 1.5 and Ewasm. The core components of Yul are functions, blocks, variables, literals, for-loops, if-statements, switch-statements, expressions and assignments to variables (Solidity — Yul, 2019).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Backends or targets are the translators from Yul to a specific bytecode. Each of the backends can expose functions prefixed with the name of the backend. Yul reserves evm_ and ewasm_ prefixes for the two proposed backends (Solidity — Yul, 2019).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A lot of work has already been done in this space, so let’s take a brief look at what we already know about the path from Solidity to Yul to Ewasm.&lt;/p&gt;

&lt;h2 id=&#34;compiling-solidity-for-yul&#34;&gt;Compiling Solidity for Yul&lt;/h2&gt;

&lt;p&gt;The solidity compiler has a special flag which can be used to compile Solidity source code into an intermediate representation (IR) of Yul.&lt;/p&gt;

&lt;p&gt;In order to provide an example of this feature, let’s use Ethereum’s Solidity compiler in the command line to compile our simple storage example from above into this YUL IR format.&lt;/p&gt;

&lt;p&gt;You will see from &lt;a href=&#34;https://gist.github.com/tpmccallum/2a32747848156fe245fe59374f162238#file-solc_yul_ir-md&#34;&gt;the code below&lt;/a&gt; that we can perform this task using the &lt;strong&gt;ir&lt;/strong&gt; flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;compiling-yul-for-ewasm&#34;&gt;Compiling Yul for Ewasm&lt;/h2&gt;

&lt;p&gt;A simple overview of the path from Yul includes the following steps.&lt;/p&gt;

&lt;p&gt;Starting with the EVM-Yul code, we need to:
Split each 256 bit (32 byte) variable into &lt;strong&gt;4 individual&lt;/strong&gt; 64 bit (8 byte) variablesTake care of endian differencesCreate a library that implements each EVM opcode as user a defined function, using the equivalent Ewasm built in functionUtilise the regular optimiser.&lt;/p&gt;

&lt;h2 id=&#34;further-solidity-compilation-examples&#34;&gt;Further Solidity compilation examples&lt;/h2&gt;

&lt;p&gt;If fed the above Yul IR, Solidity can also produce pretty printed source, binary representation and text representation.&lt;/p&gt;

&lt;p&gt;This is achieved with the following command&lt;/p&gt;

&lt;p&gt;&lt;code&gt;solc/solc --strict-assembly --optimize ~/simple_storage/simple_storage_yul_ir.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The individual outputs are as follows&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/tpmccallum/2dc42315971c04e4ba42d1ca3475a666#file-pretty_printed_source-md&#34;&gt;Pretty printed source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-15.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/tpmccallum/f9017bd1af1954837305bdb21fe47dc8#file-binary_representation-md&#34;&gt;Binary representation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/tpmccallum/ac535ed3c57627508f861e315694ae0f#file-text_representation-md&#34;&gt;Text representation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-17.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;an-example-of-the-inner-workings&#34;&gt;An example of the inner workings&lt;/h2&gt;

&lt;p&gt;Christian’s Devcon5 &lt;a href=&#34;http://chriseth.github.io/notes/talks/yul_devcon5/#/11&#34;&gt;presentation code example&lt;/a&gt;, revealed the inner workings of the Ewasm flavoured compilation process. More specifically, as shown here, the work required to produce the equivalent of the MSTORE function. As we demonstrated above, using the original EVM, MSTORE accepts 2 arguments (firstly a standard 32 byte address, and secondly a 256 bit (32 byte) word). However, as you can see, the code below shows the original Solidity smart contract 256 bit variables being split into separate 64 bit variables. You will also notice that endian swaps are occurring.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;function mstore(x1, x2, x3, x4, y1, y2, y3, y4) {
    let pos := u256_to_i32ptr(x1, x2, x3, x4)
    i64.store(pos, endian_swap(x1))
    i64.store(i64.add(pos, 8), endian_swap(x2))
    i64.store(i64.add(pos, 16), endian_swap(x3))
    i64.store(i64.add(pos, 24), endian_swap(x4))
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Available at: &lt;a href=&#34;http://chriseth.github.io/notes/talks/yul_devcon5/#/11&#34;&gt;http://chriseth.github.io/notes/talks/yul_devcon5/#/11&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;endianness&#34;&gt;Endianness&lt;/h2&gt;

&lt;p&gt;The swapping of endianness (the byte order for storing and retrieving bytes from memory) when compiling for Ewasm is crucial for the following reasons. The Ethereum Virtual Machine Specification employs big-endian byte ordering (Wood, 2014). However, the Web Assembly specification requires that all values are read and written in little endian (webassembly.github.io, 2019).&lt;/p&gt;

&lt;p&gt;As not to undersell any of the other required design efforts and hard work ahead, there are additional details which are currently undergoing consideration/discussion as this important work progresses. A few of these have been outlined in Appendix B below for brevity.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Whilst there are many potential paths between smart contract code and Ewasm. The use of Yul will provide a targeted endpoint for the current Ethereum compilers as well as an entry point for the llvm to Ewasm compiler. The Yul to llvm to Ewasm compiler will bring about the fundamental advantages of Wasm/Ewasm to any of the Yul compliant smart contract languages like Solidity and Vyper.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Using Yul is a big win, because it can re-use almost all optimiser components (Reitwiessner, 2019).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-18.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Further to this, given that other languages like Rust use LLVM as their primary codegen backend (Rust-lang.github.io, 2019), the above toolchain path will open the door for other programming languages to become part of Ethereum’s Ewasm smart contract ecosystem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-19.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;CC BY 3.0 (&lt;a href=&#34;https://creativecommons.org/licenses/by/3.0&#34;&gt;https://creativecommons.org/licenses/by/3.0&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;Antonopoulos, A. and Wood, G. (2018). Mastering Ethereum. 1st ed. O’Reilly Media.&lt;/p&gt;

&lt;p&gt;Buterin, V., 2013. Ethereum white paper.(2013). URL &lt;a href=&#34;https://github.com/ethereum/wiki/wiki/White-Pape&#34;&gt;https://github.com/ethereum/wiki/wiki/White-Paper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Docs.ethhub.io. (2019). Ethereum 1.x — EthHub. [online] Available at: &lt;a href=&#34;https://docs.ethhub.io/ethereum-roadmap/ethereum-1.x/&#34;&gt;https://docs.ethhub.io/ethereum-roadmap/ethereum-1.x/&lt;/a&gt; [Accessed 18 Oct. 2019].&lt;/p&gt;

&lt;p&gt;Ewasm. (2019). ewasm/testnet. [online] Available at: &lt;a href=&#34;https://github.com/ewasm/testnet&#34;&gt;https://github.com/ewasm/testnet&lt;/a&gt; [Accessed 18 Oct. 2019].&lt;/p&gt;

&lt;p&gt;GitHub EIP48. (2019). ethereum EIP48. [online] Available at: &lt;a href=&#34;https://github.com/ethereum/EIPs/issues/48&#34;&gt;https://github.com/ethereum/EIPs/issues/48&lt;/a&gt; [Accessed 18 Oct. 2019].&lt;/p&gt;

&lt;p&gt;MDN Web Docs. (2019). WebAssembly Concepts. [online] Available at: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/WebAssembly/Concepts&#34;&gt;https://developer.mozilla.org/en-US/docs/WebAssembly/Concepts&lt;/a&gt; [Accessed 18 Oct. 2019].&lt;/p&gt;

&lt;p&gt;Reitwiessner, C. (2019). Yul, eWasm, Solidity: Progress and Future Plans. Available at: &lt;a href=&#34;http://chriseth.github.io/notes/talks/yul_devcon5/#/&#34;&gt;http://chriseth.github.io/notes/talks/yul_devcon5/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rust-lang.github.io. (2019). Updating LLVM — Guide to Rustc Development. [online] Available at: &lt;a href=&#34;https://rust-lang.github.io/rustc-guide/codegen/updating-llvm.html&#34;&gt;https://rust-lang.github.io/rustc-guide/codegen/updating-llvm.html&lt;/a&gt; [Accessed 20 Oct. 2019].&lt;/p&gt;

&lt;p&gt;Scott, M. (2009). Programming language pragmatics. 3rd ed. Amsterdam: Elsevier/Morgan Kaufmann Pub.&lt;/p&gt;

&lt;p&gt;Solidity — Yul. (2019). Yul — Solidity 0.5.12 documentation. [online] Available at: &lt;a href=&#34;https://solidity.readthedocs.io/en/v0.5.12/yul.html&#34;&gt;https://solidity.readthedocs.io/en/v0.5.12/yul.html&lt;/a&gt;[Accessed 19 Oct. 2019].&lt;/p&gt;

&lt;p&gt;Webassembly.github.io. (2019). WebAssembly Specification. [online] Available at: &lt;a href=&#34;https://webassembly.github.io/spec/core/_download/WebAssembly.pdf&#34;&gt;https://webassembly.github.io/spec/core/_download/WebAssembly.pdf&lt;/a&gt; [Accessed 20 Oct. 2019].&lt;/p&gt;

&lt;p&gt;Wood, G., 2014. Ethereum: A secure decentralised generalised transaction ledger. Ethereum project yellow paper, 151(2014), pp.1–32.
Appendix ACompiling the simple storage smart contract in the command line&lt;/p&gt;

&lt;p&gt;As mentioned in the above article, compilation can be performed manually in the command line. For example after installing &lt;a href=&#34;https://solidity.readthedocs.io/en/v0.5.12/installing-solidity.html#building-from-source&#34;&gt;Solidity&lt;/a&gt;, &lt;a href=&#34;https://vyper.readthedocs.io/en/v0.1.0-beta.13/installing-vyper.html#installation&#34;&gt;Vyper&lt;/a&gt; or &lt;a href=&#34;https://lity.readthedocs.io/en/latest/getting-started.html#dependencies&#34;&gt;Lity&lt;/a&gt; you will have access to the appropriate local compilation environment.&lt;/p&gt;

&lt;p&gt;Here is an example of how we would compile the simple storage smart contract, to obtain a variety of different outputs, using SecondState’s Lity compiler.&lt;/p&gt;

&lt;p&gt;A.1 Obtaining deployment bytecode&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tpmccallum$ lityc/lityc --bin ~/simple_storage/simple_storage.sol&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;608060405234801561001057600080fd5b5060ec8061001f6000396000f3fe6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146085575b600080fd5b348015605957600080fd5b50608360048036036020811015606e57600080fd5b810190808035906020019092919050505060ad565b005b348015609057600080fd5b50609760b7565b6040518082815260200191505060405180910390f35b8060008190555050565b6000805490509056fea165627a7a7230582037a6182517eb7335095ca48cb7b895cbcbbdb824f48911f3f69fdc1869c7263e0029&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A.2 Obtaining runtime bytecode&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tpmccallum$ lityc/lityc --bin-runtime ~/simple_storage/simple_storage.sol&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146085575b600080fd5b348015605957600080fd5b50608360048036036020811015606e57600080fd5b810190808035906020019092919050505060ad565b005b348015609057600080fd5b50609760b7565b6040518082815260200191505060405180910390f35b8060008190555050565b6000805490509056fea165627a7a7230582037a6182517eb7335095ca48cb7b895cbcbbdb824f48911f3f69fdc1869c7263e0029&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A.3 Obtaining opcodes&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tpmccallum$ lityc/lityc --opcodes ~/simple_storage/simple_storage.sol&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xec DUP1 PUSH2 0x1f PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x49 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xffffffff AND DUP1 PUSH4 0x60fe47b1 EQ PUSH1 0x4e JUMPI DUP1 PUSH4 0x6d4ce63c EQ PUSH1 0x85 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH1 0x59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x83 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH1 0x6e JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0xad JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH1 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 PUSH1 0xb7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 POP SWAP1 JUMP INVALID LOG1 PUSH6 0x627a7a723058 KECCAK256 CALLDATACOPY 0xa6 XOR 0x25 OR 0xeb PUSH20 0x35095ca48cb7b895cbcbbdb824f48911f3f69fdc XOR PUSH10 0xc7263e00290000000000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A.4 Obtaining ABI&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tpmccallum$ lityc/lityc --abi ~/simple_storage/simple_storage.sol&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[{&amp;quot;constant&amp;quot;:false,&amp;quot;inputs&amp;quot;:[{&amp;quot;name&amp;quot;:&amp;quot;x&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;uint256&amp;quot;}],&amp;quot;name&amp;quot;:&amp;quot;set&amp;quot;,&amp;quot;outputs&amp;quot;:[],&amp;quot;payable&amp;quot;:false,&amp;quot;stateMutability&amp;quot;:&amp;quot;nonpayable&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;},{&amp;quot;constant&amp;quot;:true,&amp;quot;inputs&amp;quot;:[],&amp;quot;name&amp;quot;:&amp;quot;get&amp;quot;,&amp;quot;outputs&amp;quot;:[{&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;uint256&amp;quot;}],&amp;quot;payable&amp;quot;:false,&amp;quot;stateMutability&amp;quot;:&amp;quot;view&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;}]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Appendix B&lt;/p&gt;

&lt;p&gt;Topics for future consideration/discussion&lt;/p&gt;

&lt;h3 id=&#34;interacting-with-the-rest-of-the-1-x-evm&#34;&gt;Interacting with the rest of the 1.x EVM&lt;/h3&gt;

&lt;p&gt;In addition to the typical bytecode operations, i.e. stack, memory, and storage access, the original EVM also has access to account information, i.e. addresses and balances as well as block information and current gas price (Antonopoulos and Wood, 2018). Storage access is instrumental for correct operation. For example, the execution of a valid transaction begins with an irrevocable change made to the state: the nonce of the account of the sender (Wood, 2014).&lt;/p&gt;

&lt;p&gt;The Ethereum 1.x roadmap indicates that there are unresolved questions about how Ewasm will interact with the rest of the EVM state i.e. contract storage, ether balances and so forth. One approach is to exclude Ewasm code from directly accessing EVM state, but allow it to exchange input/output when called (Docs.ethhub.io, 2019).&lt;/p&gt;

&lt;h3 id=&#34;deterministic-behaviour&#34;&gt;Deterministic behaviour&lt;/h3&gt;

&lt;p&gt;As we know, Ewasm is a subset of Wasm, and Wasm has a couple of features which are non-deterministic. As Ewasm moves forward there will need to be a way to reject any contracts which have non-deterministic features (Docs.ethhub.io, 2019). At present it appears that this can be achieved by a single &lt;a href=&#34;https://github.com/ewasm/design/blob/master/sentinel.md&#34;&gt;sentinel contract&lt;/a&gt;. The sentinel is a system contract (part of the genesis or hardfork Ewasm is enabled on). The sentinel contract has a raw interface which is used for contract validation during deployment. It works by deliberately issuing an invalid operation (invoking a regular failure) when an unexpected issue occurs or deliberately issuing the revert operation if invalid input is ever detected.&lt;/p&gt;

&lt;h3 id=&#34;gas-metering&#34;&gt;Gas metering&lt;/h3&gt;

&lt;p&gt;The calculation of gas for Ewasm contract deployment and interactions requires some future work. It is presently proposed that automatic upper bound estimations are used. Static analysis can be performed on the bytecode and, for a subset of codes, the upper bounds for executed instructions (virtual gas) can also be calculated (Docs.ethhub.io, 2019).&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>深度剖析以太坊虚拟机（EVM）的未来：Ewasm</title>
      <link>http://blog.secondstate.io/post/20191029-ewasm-zh/</link>
      <pubDate>Tue, 29 Oct 2019 20:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191029-ewasm-zh/</guid>
      
        <description>

&lt;p&gt;以太坊是具有内置图灵完备编程语言的区块链。任何人都可以使用以太坊智能合约来创建去中心化应用程序。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“以太坊虚拟机（EVM）是以太坊处理智能合约部署和执行的一部分”（Antonopoulos and Wood，2018）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;EVM 由基于堆栈的架构组成。为了部署智能合约，必须首先将所有高级以太坊智能合约代码编译为机器可读代码（称为字节码）。然后，EVM 通过后进先出堆栈安排来处理此字节码代码（一系列单字节操作码和可选参数）。此操作类似于 Java 虚拟机（JVM），其中每条指令都以单字节操作码和参数开始，如果有参数的话，则占用后面的未对齐的字节，值按大端排序给出（Scott，2009）。&lt;/p&gt;

&lt;p&gt;本文的首要目标是解释以太坊基于堆栈的 EVM 的内部工作原理。解释了这些 EVM 基础知识，我们将开始看到以太坊有机地遵循了基于堆栈的虚拟机二进制指令格式，使其有望过渡到 WebAssembly 的光明未来。&lt;/p&gt;

&lt;p&gt;让我们带着了解这些的目的，首先看一下 WebAssembly。&lt;/p&gt;

&lt;h2 id=&#34;webassembly-简称-wasm&#34;&gt;WebAssembly(简称 Wasm)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt;(Wasm)是一种可以在现代 Web 浏览器中运行新型代码。它带来了新功能并在性能上有重大进展。Wasm 旨在成为 C，C++和 Rust 等低级源语言的有效编译目标（MDN Web Docs，2019）。&lt;/p&gt;

&lt;h2 id=&#34;以太坊-web-assembly-简称-ewasm&#34;&gt;以太坊 Web Assembly(简称 Ewasm）&lt;/h2&gt;

&lt;p&gt;以太坊 Web Assembly （Ewasm）是基于现代标准 WebAssembly 虚拟机构建的确定性智能合约执行引擎。Ewasm 是替代EVM 的主要候选方案，是Ethereum 2.0 “Serenity”路线图的一部分。甚至，还有人建议在以太坊主网上采用 Ewasm （ewasm，2019）。&lt;/p&gt;

&lt;h2 id=&#34;为什么选择-ewasm&#34;&gt;为什么选择 Ewasm&lt;/h2&gt;

&lt;p&gt;EVM 的当前架构是释放其原始（raw）性能的最大障碍之一（GitHub EIP48，2019）。例如，虽然 256 位字长可促进本机哈希和椭圆曲线运算（Antonopoulos and Wood，2018），但也使从 EVM 操作码转换成硬件指令的过程难度过大，远超所需。提供更接近硬件映射的架构将大大提高以太坊的性能（GitHub EIP48，2019）。&lt;/p&gt;

&lt;p&gt;除了性能增强方面，Ewasm 项目的设计目标之一是还支持跨多种语言和工具进行智能合约开发，即把 LLVM，C，C++，Rust，JavaScript 纳入开发周期。&lt;/p&gt;

&lt;p&gt;从理论上讲，可以编译为 Wasm 的任何语言都可以用来编写智能合约。只要实现 &lt;a href=&#34;https://github.com/ewasm/design/blob/master/contract_interface.md&#34;&gt;Ewasm 合约接口&lt;/a&gt;（ECI）和&lt;a href=&#34;https://github.com/ewasm/design/blob/master/eth_interface.md&#34;&gt;以太坊环境接口&lt;/a&gt;（EEI）（ewasm，2019）。&lt;/p&gt;

&lt;h2 id=&#34;智能合约&#34;&gt;智能合约&lt;/h2&gt;

&lt;p&gt;通过使用原始 EVM 架构逐步创建、编译和部署以太坊智能合约，来了解一下EVM 的基本要件。&lt;/p&gt;

&lt;p&gt;以太坊智能合约就像以太坊执行环境中的“自治代理”，当这个合约被消息或交易“触发”时，总是会执行特定的代码段，并直接控制自己的以太币余额和自己的键 / 值存储，从而跟踪持久变量（Buterin，2013）。&lt;/p&gt;

&lt;p&gt;诸如 &lt;a href=&#34;https://solidity.readthedocs.io/en/v0.5.12/&#34;&gt;Solidity&lt;/a&gt;，&lt;a href=&#34;https://vyper.readthedocs.io/en/v0.1.0-beta.13/&#34;&gt;Vyper&lt;/a&gt; 和&lt;a href=&#34;https://github.com/second-state/lity&#34;&gt;Lity&lt;/a&gt; 之类的每种更高级别的智能合约源编程语言都维护着自己的编译器。智能合约的源代码可以编译为各种输出。包括但不限于应用程序二进制接口（ABI），字节码流和操作码。&lt;/p&gt;

&lt;h2 id=&#34;智能合约编译&#34;&gt;智能合约编译&lt;/h2&gt;

&lt;p&gt;在本地计算机上安装编译器之前，建议您检查基于Web 的新编译器，例如SecondState 的&lt;a href=&#34;http://secondstate.io/buidl&#34;&gt;BUIDL 环境&lt;/a&gt;。&lt;strong&gt;这将为您节省大量时间。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;让我们使用&lt;a href=&#34;https://gist.github.com/tpmccallum/bb077c0768631873708b4000a693dde7&#34;&gt;简单的存储源代码&lt;/a&gt;，并使用 SecondState 的 BUIDL 环境对其进行编译，如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;单击编译按钮将立即生成智能合约的 ABI 和字节码，如下所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果要查看如何在命令行中（使用本地安装的编译器）执行此编译，请参阅本文末尾的附录 A。&lt;/p&gt;

&lt;h2 id=&#34;分析部署字节码&#34;&gt;分析部署字节码&lt;/h2&gt;

&lt;p&gt;如果我们查看字节码中的前 4 条指令，则会看到以下内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;60&lt;/strong&gt;80&lt;strong&gt;60&lt;/strong&gt;40&lt;strong&gt;5234&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果我们查看&lt;a href=&#34;https://ethereum.github.io/yellowpaper/paper.pdf&#34;&gt;以太坊黄皮书&lt;/a&gt;第 30 页上引用的这些值的助记符表示，我们将看到第一个指令（60）为 PUSH1。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;δ&#34;&gt;δ&lt;/h3&gt;

&lt;p&gt;助记符右侧标有δ的列表示要通过 PUSH1 指令（在本例中为 0）从堆栈中删除的 item 数。&lt;/p&gt;

&lt;h3 id=&#34;α&#34;&gt;α&lt;/h3&gt;

&lt;p&gt;下一个标记为α的列，代表要添加的其他 item 数通过 PUSH1 指令放在堆栈上。在这种情况下为 1；一个字节 0x80。&lt;/p&gt;

&lt;p&gt;在下面的示例中，我们现在可以看到第一条指令（0x60） PUSH1 将值 0x80 压入了堆栈，第二条指令（0x60） PUSH1 将值 0x40 压入了堆栈。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;60&lt;/strong&gt;80&lt;strong&gt;60&lt;/strong&gt;40…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PUSH1&lt;/strong&gt; 0x80 &lt;strong&gt;PUSH1&lt;/strong&gt; 0x40…&lt;/p&gt;

&lt;p&gt;如果沿字节码移动，则会遇到值为 0x52 的指令。正如您在下面的黄皮书中所见，该指令具有 MSTORE 的助记符表示形式。&lt;/p&gt;

&lt;p&gt;60806040&lt;strong&gt;52&lt;/strong&gt;34&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果再次查看助记符右侧的δ列，我们可以看到 MSTORE 将消耗堆栈顶部的两个 item。总计，MSTORE 将消耗堆栈中的前 2 个 item，但将 0 个 item 放回堆栈中。&lt;/p&gt;

&lt;p&gt;在此阶段必须指出，MSTORE 是一项内存操作，其任务是将一个单词保存到内存中。请不要对这里使用“word”这个说法感到困惑。&lt;/p&gt;

&lt;p&gt;EVM 的字长为 256 位（Antonopoulos and Wood，2018）。&lt;/p&gt;

&lt;p&gt;这个“word”本身不是单词。比如，它可以是账户地址等。&lt;/p&gt;

&lt;p&gt;MSTORE 通过首先从堆栈顶部消耗当前条目来开始其操作；即一个地址会被指定在 word 在存储器中的存储位置。在这种情况下，地址位置为 0x60。然后，MSTORE 使用堆栈中的下一个条目并将其（0x80）保存到预先指定的地址（0x60）。在此阶段，堆栈上没有剩余的条目。&lt;/p&gt;

&lt;p&gt;下一条指令是（0x34）。它具有 CALLVALUE 的助记符表示形式。&lt;/p&gt;

&lt;p&gt;60806040&lt;strong&gt;5234&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果我们密切注意标记为α的列，作为其标准操作的一部分，我们将看到 CALL VALUE 将在堆栈中放置一项。但是，我们刚才提到堆栈当前为空，因此这引发了以下问题。CALL VALUE 如何获取要放在堆栈中的数据？&lt;/p&gt;

&lt;p&gt;从黄皮书中可以看到，所有值在 30s （0x30 至 0x3e）中的指令都与环境信息有关。在这种情况下，CALLVALUE 从负责执行此字节码的消息调用中获取其所需的数据。与环境信息有关的另一个示例是指令 0x33，它具有 CALLER 的助记符表示。CALLER 指令能够自动获取启动字节码执行的以太坊帐户的地址。&lt;/p&gt;

&lt;h2 id=&#34;部署与运行时字节码&#34;&gt;部署与运行时字节码&lt;/h2&gt;

&lt;p&gt;在此刻，区分部署字节码和运行时字节码非常重要。如果查看附录 A.1 （获取部署字节码）和附录 A.2 （获取运行时字节码），您会注意到返回的字节码结果并不相同。&lt;/p&gt;

&lt;p&gt;运行时字节码是调用已部署的智能合约的功能时执行的字节码。&lt;/p&gt;

&lt;p&gt;部署字节码包含其他指令，这些指令仅与部署有关。&lt;/p&gt;

&lt;p&gt;有趣的是，运行时字节码始终可以看作是代码的子集，它逐字地驻留在部署字节码内。如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;分析运行时字节码&#34;&gt;分析运行时字节码&lt;/h2&gt;

&lt;p&gt;每个智能合约功能都可以标识为 4 字节功能签名（在运行时字节码内部）。要计算功能签名，我们要先获取功能名称。在我们的例子中，让我们从功能“ set”开始。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;除了函数名称“ set”之外，我们还采用了函数的输入参数数据类型（用逗号分隔并用括号括起来）。例如，在我们的简单情况下，我们以文本集（uint256）结尾。&lt;/p&gt;

&lt;p&gt;注意：创建函数选择器文本时，请勿使用任何空格。&lt;/p&gt;

&lt;p&gt;获得此信息后，我们将创建 sha3 哈希的十六进制表示，并将其截断为仅 4 个字节。这是 web3.js 和 web3.py 中的示例。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;selectorHash =“ 0x” str （web3.toHex （web3.sha3 （text =“ set （uint256）”））））[2:10]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var selectorHash = web3.sha3 （“ set （uint256）”）。substring （0,10）&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以上两个命令都将返回以下签名0x60fe47b1，我们可以在部署和运行时字节码数据中轻松找到它们。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在这一阶段，我们了解了字节码中的每条指令是如何执行的（从堆栈中获取和获取信息，然后调用环境和内存等）。我们现在对调用代码如何使用环境信息执行状态转换功能等有了很好的了解，让我们继续以太坊的特定 Ewasm 实现细节。&lt;/p&gt;

&lt;h2 id=&#34;ewasm-实施&#34;&gt;Ewasm 实施&lt;/h2&gt;

&lt;p&gt;之前我们提到过，智能合约的源代码可以编译成各种输出。当然，从高级智能合约代码到 Ewasm 的路径是一项复杂的任务，可以通过不同的工具链采用多种多样的编译路径。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.secondstate.io/&#34;&gt;Second State&lt;/a&gt; 的开发人员最近建立了一个 Solidity 到 Ewasm 的编译器，称为 &lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;Soll&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在以下以太坊重要的会议召开前，Second State 已完成了 demo 的原型，这一具有挑战性的任务：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://crosslink.taipei/&#34;&gt;Crosslink&lt;/a&gt;-在台北举行的全球领先的区块链研究人员和开发者会议&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devcon.org/&#34;&gt;Devcon5&lt;/a&gt;-以太坊开发者国际会议，在日本大阪举行&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;crosslink-2019-年-10-月&#34;&gt;Crosslink（2019 年 10 月）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-11.png&#34; alt=&#34;&#34; /&gt;
Second State 的开发 Hung-Ying-Ying 因为&lt;a href=&#34;https://blog.secondstate.io/post/20191022-soll-compiler-project/&#34;&gt;Soll 编译器项目&lt;/a&gt;得到以太坊基金会奖金（与 Vitalik Buterin 一起在台北 Crosslink 活动中合照）。&lt;/p&gt;

&lt;h3 id=&#34;devcon5&#34;&gt;Devcon5&lt;/h3&gt;

&lt;p&gt;如果您没有参加 Devcon5，以下视频概述了 Soll 的操作。即在新的以太坊 &lt;a href=&#34;http://ewasm.ethereum.org/&#34;&gt;Ewasm 测试网&lt;/a&gt;上部署以太坊 ERC20 Solidity 智能合约，并与之交互。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=X-A6sP_HTy0&#34;&gt;https://www.youtube.com/watch?v=X-A6sP_HTy0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Devcon5 大会非常适合分享 SecondState 团队的最新 Ewasm 开发。在会议的第一天正式介绍 Second State 提出的以太坊 1.X 与以太坊 2.0 的解决方案之后，又进行了一次非正式的公开 demo 和讨论。&lt;/p&gt;

&lt;p&gt;在 demo 后，与 Solidity 团队的 Christian Reitwiessner 以及其他人进行的讨论中，展现了 Second State 在最佳协作以及减少未来 Ewasm 领域里不同开发人员和软件项目之间重复工作方面的最佳发展方向。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在成功完成了从 Solidity 到 LLVM 到 Ewasm 的原型编译之后，Second State 参考 Christian 的宝贵意见，将努力实现执行 Yul 到 llvm 到 Ewasm 的编译路径。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-13.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;yul&#34;&gt;Yul&lt;/h2&gt;

&lt;p&gt;Yul 是以太坊特定的中间语言。以太坊 Solidity 编译器（可能还有 Vyper 编译器）将来的版本会全面支持 Yul 作为中间语言。&lt;/p&gt;

&lt;p&gt;Yul 被设计为 EVM 1.0，EVM 1.5 和 Ewasm 都能使用。Yul 的核心组件是函数、区块、变量、literals，for 循环，if 语句，switch 语句，表达式以及对变量的赋值（Solidity-Yul，2019）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;后端或目标是从 Yul 到特定字节码的转换器。每个后端都可以公开以后端名称为前缀的函数。Yul 为提出的两个后端保留 evm_和 ewasm_前缀（Solidity-Yul，2019）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在这个领域已经完成了许多工作，因此，让我们简要了解一下从 Solidity 到 Yul 到 Ewasm 之路的已经熟知的部分。&lt;/p&gt;

&lt;h2 id=&#34;为-yul-编译-solidity&#34;&gt;为 Yul 编译 Solidity&lt;/h2&gt;

&lt;p&gt;Solidity 编译器具有一个特殊的 flag，可用于将 Solidity 源代码编译为 Yul 的中间表示（IR）。&lt;/p&gt;

&lt;p&gt;为了提供此功能的示例，我们在命令行中使用以太坊的 Solidity 编译器，从上方将简单存储示例编译为这种 YUL IR 格式。&lt;/p&gt;

&lt;p&gt;您将从下面的&lt;a href=&#34;https://gist.github.com/tpmccallum/2a32747848156fe245fe59374f162238#file-solc_yul_ir-md&#34;&gt;代码&lt;/a&gt;中看到我们可以使用 &lt;strong&gt;IR&lt;/strong&gt; flag 执行此任务。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;为-ewasm-编译-yul&#34;&gt;为 Ewasm 编译 Yul&lt;/h2&gt;

&lt;p&gt;从 Yul 出发的路径的简单概述包括以下步骤。&lt;/p&gt;

&lt;p&gt;从 EVM-Yul 代码开始，我们需要：&lt;/p&gt;

&lt;p&gt;将每个 256 位（32 字节）变量拆分为 4 个单独的 64 位（8 字节）变量。注意字节序差异。&lt;/p&gt;

&lt;p&gt;创建一个库，该库使用内置的等效 Ewasm 作为用户定义的函数来实现每个 EVM 操作码，并使用常规的优化器。&lt;/p&gt;

&lt;h2 id=&#34;更多-solidity-编译示例&#34;&gt;更多 Solidity 编译示例&lt;/h2&gt;

&lt;p&gt;如果把上述 YUL IR 代码交给 Solidity 编译器处理，Solidity 可以生成漂亮的打印格式、二进制表达格式和文本表达格式。&lt;/p&gt;

&lt;p&gt;这可以通过以下命令实现&lt;/p&gt;

&lt;p&gt;&lt;code&gt;solc / solc --strict-assembly --optimize〜/ simple_storage / simple_storage_yul_ir.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;各个输出如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/tpmccallum/2dc42315971c04e4ba42d1ca3475a666#file-pretty_printed_source-md&#34;&gt;漂亮的打印格式&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-15.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/tpmccallum/f9017bd1af1954837305bdb21fe47dc8#file-binary_representation-md&#34;&gt;二进制表达格式&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/tpmccallum/ac535ed3c57627508f861e315694ae0f#file-text_representation-md&#34;&gt;文本表达格式&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-17.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;内部工作机制的一个例子&#34;&gt;内部工作机制的一个例子&lt;/h2&gt;

&lt;p&gt;Christian 在 Devcon5 演示的&lt;a href=&#34;http://chriseth.github.io/notes/talks/yul_devcon5/#/11&#34;&gt;代码示例&lt;/a&gt;，展示了 Ewasm 风格的编译过程的内部工作原理。更具体地说，如此处显示，产生等同于 MSTORE 函数所要求的工作。如上面的 demo，使用原始 EVM，MSTORE 接受 2 个参数（首先是标准的 32 字节地址，其次是 256 位（32 字节）的单词）。但是，如您所见，以下代码显示了原始的 Solidity 智能合约 256 位变量被拆分为单独的 64 位变量。您还将注意到发生了字节序交换。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;function mstore （x1，x2，x3，x4，y1，y2，y3，y4）{
let pos：= u256_to_i32ptr （x1，x2，x3，x4）
i64.store （pos，endian_swap （x1））
i64.store （i64.add （pos，8），endian_swap （x2））
i64.store （i64.add （pos，16），endian_swap （x3））
i64.store （i64.add （pos，24），endian_swap （x4））}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可在此网址获得：&lt;a href=&#34;http://chriseth.github.io/notes/talks/yul_devcon5/#/11&#34;&gt;http://chriseth.github.io/notes/talks/yul_devcon5/#/11&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;字节序&#34;&gt;字节序&lt;/h2&gt;

&lt;p&gt;出于以下原因，在为 Ewasm 进行编译时，交换字节序（存储和从内存中检索字节的字节顺序）至关重要。以太坊虚拟机规范采用大端字节排序（Wood，2014）。但是，Web Assembly 规范要求所有值都必须以 Little Endian 读写（webassembly.github.io，2019）。&lt;/p&gt;

&lt;p&gt;随着这项重要工作的进展，目前正在考虑 / 讨论其他细节。为了简洁起见，以下的附录 B 中概述了其中的一些细节。&lt;/p&gt;

&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;

&lt;p&gt;智能合约代码和 Ewasm 之间有许多的路径。Yul 的使用将为当前的以太坊编译器提供目标终端（target endpoints），并为 llvm 到 Ewasm 编译器提供入口。从 Yul 到 llvm 到 Ewasm 的编译器将为任何与 Yul 兼容的智能合约语言（如 Solidity 和 Vyper）带来 Wasm / Ewasm 的基本优势。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;使用 Yul 是一项重大胜利，因为它可以重复使用几乎所有的优化器组件（Reitwiessner，2019）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-18.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;除此之外，鉴于 Rust 等其他语言都将 LLVM 作为其主要的代码源后端（Rust-lang.github.io，2019），上述工具链路径将为其他编程语言成为以太坊的 Ewasm 智能合约生态系统的一部分打开大门 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191029-EWASM-19.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;附录 A 在命令行中编译简单存储智能合约&lt;/p&gt;

&lt;p&gt;如以上文章所述，可以在命令行中手动执行编译。例如，在安装 Solidity，Vyper 或 Lity 之后，您将可以访问适当的本地编译环境。&lt;/p&gt;

&lt;p&gt;这是一个示例，说明了如何使用 SecondState 的 Lity 编译器来编译简单的存储智能合约，以获得各种不同的输出。&lt;/p&gt;

&lt;p&gt;A.1 获取部署字节码&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tpmccallum$ lityc/lityc --bin ~/simple_storage/simple_storage.sol&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;608060405234801561001057600080fd5b5060ec8061001f6000396000f3fe6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146085575b600080fd5b348015605957600080fd5b50608360048036036020811015606e57600080fd5b810190808035906020019092919050505060ad565b005b348015609057600080fd5b50609760b7565b6040518082815260200191505060405180910390f35b8060008190555050565b6000805490509056fea165627a7a7230582037a6182517eb7335095ca48cb7b895cbcbbdb824f48911f3f69fdc1869c7263e0029&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A.2 获取运行时字节码&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tpmccallum$ lityc/lityc --bin-runtime ~/simple_storage/simple_storage.sol&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146085575b600080fd5b348015605957600080fd5b50608360048036036020811015606e57600080fd5b810190808035906020019092919050505060ad565b005b348015609057600080fd5b50609760b7565b6040518082815260200191505060405180910390f35b8060008190555050565b6000805490509056fea165627a7a7230582037a6182517eb7335095ca48cb7b895cbcbbdb824f48911f3f69fdc1869c7263e0029&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A.3 获取操作码&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tpmccallum$ lityc/lityc --opcodes ~/simple_storage/simple_storage.sol&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xec DUP1 PUSH2 0x1f PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x49 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xffffffff AND DUP1 PUSH4 0x60fe47b1 EQ PUSH1 0x4e JUMPI DUP1 PUSH4 0x6d4ce63c EQ PUSH1 0x85 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH1 0x59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x83 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH1 0x6e JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0xad JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH1 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 PUSH1 0xb7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 POP SWAP1 JUMP INVALID LOG1 PUSH6 0x627a7a723058 KECCAK256 CALLDATACOPY 0xa6 XOR 0x25 OR 0xeb PUSH20 0x35095ca48cb7b895cbcbbdb824f48911f3f69fdc XOR PUSH10 0xc7263e00290000000000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A.4 获取 ABI&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tpmccallum$ lityc/lityc --abi ~/simple_storage/simple_storage.sol&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[{&amp;quot;constant&amp;quot;:false,&amp;quot;inputs&amp;quot;:[{&amp;quot;name&amp;quot;:&amp;quot;x&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;uint256&amp;quot;}],&amp;quot;name&amp;quot;:&amp;quot;set&amp;quot;,&amp;quot;outputs&amp;quot;:[],&amp;quot;payable&amp;quot;:false,&amp;quot;stateMutability&amp;quot;:&amp;quot;nonpayable&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;},{&amp;quot;constant&amp;quot;:true,&amp;quot;inputs&amp;quot;:[],&amp;quot;name&amp;quot;:&amp;quot;get&amp;quot;,&amp;quot;outputs&amp;quot;:[{&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;uint256&amp;quot;}],&amp;quot;payable&amp;quot;:false,&amp;quot;stateMutability&amp;quot;:&amp;quot;view&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;}]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;附录 B 待考虑 / 讨论的议题：&lt;/p&gt;

&lt;p&gt;1.与 1.x EVM 的其余部分交互&lt;/p&gt;

&lt;p&gt;除了典型的字节码操作，即堆栈，内存和存储访问之外，原始 EVM 还可以访问帐户信息，即地址和余额以及区块信息和当前 gas 价格（Antonopoulos 和 Wood，2018 年）。对存储的访问有助于正确操作。例如，有效交易的执行始于对状态的不可撤销的更改：发件人帐户的 nonce （Wood，2014 年）。&lt;/p&gt;

&lt;p&gt;根据以太坊 1.x 路线图，关于 Ewasm 将如何与 EVM 状态的其余部分（即合约存储，以太坊余额等）相互作用的问题尚待解决。有一种方法是排除 Ewasm 代码直接访问 EVM 状态，但允许 Ewasm 在被调用时交换输入 / 输出（Docs.ethhub.io，2019）。&lt;/p&gt;

&lt;p&gt;2.确定性行为&lt;/p&gt;

&lt;p&gt;众所周知，Ewasm 是 Wasm 的子集，而 Wasm 具有一些不确定的特征。随着 Ewasm 的发展，需要一种方法来拒绝具有不确定性特征的任何合约（Docs.ethhub.io，2019）。目前看来，这可以通过一份定点合约来实现。前哨是系统合约（已启用创世纪或硬叉 Ewasm 的一部分）。前哨合约具有原始接口，该接口用于在部署期间进行合约验证。在发生意外问题时，前哨合约执行无效操作（调用常规故障）或在曾经检测到无效输入的情况下，前哨合约执行还原操作。&lt;/p&gt;

&lt;p&gt;3.Gas 计量&lt;/p&gt;

&lt;p&gt;Ewasm 合约部署和交互的 gas 的计算尚未确定。目前提出使用自动上限估计。可以对字节码执行静态分析，并且对于代码的子集，还可以计算已执行指令（虚拟气体）的上限（Docs.ethhub.io，2019）。&lt;/p&gt;

&lt;p&gt;参考文献&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Antonopoulos, A. and Wood, G. (2018). 《精通以太坊第一版》 O’Reilly Media.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ethereum/wiki/wiki/White-Pape&#34;&gt;Docs.ethhub.io&lt;/a&gt;. (2019). 以太坊 1.x — EthHub.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ewasm/testnet&#34;&gt;Ewasm&lt;/a&gt;. (2019).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GitHub EIP48. (2019). &lt;a href=&#34;https://github.com/ethereum/EIPs/issues/48&#34;&gt;以太坊 EIP48&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;网站：&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/WebAssembly/Concepts&#34;&gt;MDN Web Docs&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reitwiessner, C. (2019). &lt;a href=&#34;http://chriseth.github.io/notes/talks/yul_devcon5/#/&#34;&gt;Yul,、eWasm 与 Solidity 的进展与未来计划&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://rust-lang.github.io/rustc-guide/codegen/updating-llvm.html&#34;&gt;Rust-lang.github.io&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scott, M. (2009). 《编程语言论》第三版 Amsterdam: Elsevier/Morgan Kaufmann Pub.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Solidity — Yul. (2019). Yul — &lt;a href=&#34;https://solidity.readthedocs.io/en/v0.5.12/yul.html&#34;&gt;Solidity 0.5.12 文档&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://webassembly.github.io/spec/core/_download/WebAssembly.pdf&#34;&gt;Webassembly.github.io&lt;/a&gt;. (2019). WebAssembly 分类 .&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wood, G., 2014.《以太坊黄皮书》 以太坊：一个安全的去中心化通用交易账本&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Build your own decentralized website with BUIDL IDE</title>
      <link>http://blog.secondstate.io/post/20191025-build-your-website/</link>
      <pubDate>Fri, 25 Oct 2019 20:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191025-build-your-website/</guid>
      
        <description>

&lt;p&gt;Have you ever tried to build your own website?&lt;/p&gt;

&lt;p&gt;You need to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get Web Hosting&lt;/li&gt;
&lt;li&gt;Register a Domain name(usually ~$15/year)&lt;/li&gt;
&lt;li&gt;Set up your website from the web host&lt;/li&gt;
&lt;li&gt;········&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Way too many steps! But with BUIDL IDE tools, you can build a decentralized website all by yourself in 5 minutes. The website will not only allow you to write any words you want but also allow your friends to access this page and interact with you. Click &lt;a href=&#34;https://opendapps.secondstate.io/bitcoin_1571992686948.html&#34;&gt;here&lt;/a&gt; to see an example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191025-build-your-own-website-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Share your website link and invite them to leave a comment or “thumb up”.&lt;/p&gt;

&lt;h2 id=&#34;the-basic-knowledge&#34;&gt;The basic knowledge&lt;/h2&gt;

&lt;p&gt;Blockchain applications with smart contracts as the back end, with HTML, CSS, and Javascript as the front end. Smart contracts replace the usual connection between website and the web host on our decentralized website.&lt;/p&gt;

&lt;h2 id=&#34;start-coding&#34;&gt;start coding&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;
Open the BUIDL IDE tool in any browser. &lt;a href=&#34;http://buidl.secondstate.io/&#34;&gt;http://buidl.secondstate.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;
Check out if the Providers work. The icon, if green, means BUIDL IDE is connected to the Second State DevChain. Please refresh the page when the icon is red.
&lt;img src=&#34;http://blog.secondstate.io/images/20191020-public-comment-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;3.1 Copy and paste the following code to the contract section of BUIDL.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;pragma solidity &amp;gt;= 0.4.0;

contract Celebration {

    string public greeting;
    mapping (address =&amp;gt; string) likes;
    address [] addrs;

    constructor(string _greeting) public {
        greeting = _greeting;
    }

    function addLike (address _addr, string _name) public {
        likes[_addr] = _name;
        addrs.push(_addr);
    }

    function getLikeName(address _addr) public view returns(string) {
        return likes[_addr];
    }

    function getAddrs () public view returns (address []) {
        return addrs;
    }
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;3.2 Click on Compile and you will see the following. Enter your text in &lt;code&gt;_greeting&lt;/code&gt;, and then click on deploy on chain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20190920-BUIDL-demo-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The contract is now deployed on the DevChain, and you could see the Contract Name, TX and Address on the left tab. (TX records this transaction and it is unique. So is the contract address.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20190920-BUIDL-demo-04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We have completed the back end of the website. Smart contract will connect the blockchain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;4.1 Go to the dapp section. Clear the codes in the HTML, CSS, and JS editor. (Note: Please do not clear the code of “Don&amp;rsquo;t modify” section)&lt;/p&gt;

&lt;p&gt;4.2 Copy and paste the following HTML code into the HTML editor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
    &amp;lt;br/&amp;gt;
    &amp;lt;div class=&amp;#34;jumbotron&amp;#34;&amp;gt;
        &amp;lt;p class=&amp;#34;lead&amp;#34; id=&amp;#34;greeting&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;hr/&amp;gt;
        &amp;lt;form id=&amp;#34;form&amp;#34; class=&amp;#34;form-inline&amp;#34;&amp;gt;
            &amp;lt;div class=&amp;#34;form-group mx-sm-3 mb-2&amp;#34;&amp;gt;
                &amp;lt;input type=&amp;#34;text&amp;#34; class=&amp;#34;form-control&amp;#34; id=&amp;#34;name&amp;#34; placeholder=&amp;#34;Your Name&amp;#34;&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&amp;#34;alert alert-primary&amp;#34; role=&amp;#34;alert&amp;#34; id=&amp;#34;recording&amp;#34; style=&amp;#34;display:none&amp;#34;&amp;gt;
                Recording on the Second State DevChain.Please wait up to 5 seconds for confirmation.
            &amp;lt;/div&amp;gt;
            &amp;lt;button type=&amp;#34;button&amp;#34; id=&amp;#34;submit&amp;#34; onclick=&amp;#34;like();&amp;#34; class=&amp;#34;btn btn-primary mb-2&amp;#34;&amp;gt;Like👍&amp;lt;/button&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;p id=&amp;#34;me&amp;#34; style=&amp;#34;display:none&amp;#34;&amp;gt;Thank you, &amp;lt;span id=&amp;#34;myname&amp;#34; class=&amp;#34;badge badge-info&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p id=&amp;#34;likes&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div style=&amp;#34;text-align:center&amp;#34;&amp;gt;
    &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
    Created by the &amp;lt;a href=&amp;#34;https://buidl.secondstate.io/&amp;#34;&amp;gt;BUIDL IDE&amp;lt;/a&amp;gt;
     &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
    [&amp;lt;a href=&amp;#34;https://docs.secondstate.io/buidl-developer-tool/why-buidl&amp;#34;&amp;gt;Learn more&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;https://blog.secondstate.io/post/20191025-build-your-website/&amp;#34;&amp;gt;Check out the tutorial&amp;lt;/a&amp;gt;]
&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;4.3 Copy and paste the following JavaScript code from var instance = null into the JS editor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;/* Don&amp;#39;t modify */
Do not change the code Paste from `var instance = null; `
/* Don&amp;#39;t modify */

var instance = null;
window.addEventListener(&amp;#39;web3Ready&amp;#39;, function() {
  var contract = web3.ss.contract(abi);
  instance = contract.at(cAddr);
  reload();
});

function reload() {
    document.querySelector(&amp;#34;#greeting&amp;#34;).innerHTML = instance.greeting();
    web3.ss.getAccounts(function (e, address) {
        if (!e) {
            var myName = instance.getLikeName(address);
            if (myName) {
                document.querySelector(&amp;#34;#form&amp;#34;).style.display = &amp;#34;none&amp;#34;;
                document.querySelector(&amp;#34;#me&amp;#34;).style.display = &amp;#34;block&amp;#34;;
                document.querySelector(&amp;#34;#myname&amp;#34;).innerHTML = myName;
            }
            
            var likes = &amp;#34;Liked by &amp;#34;;
            var addrs = instance.getAddrs();
            addrs.forEach(function(addr) {
                instance.getLikeName(addr, function (ee, r) {
                    if (!ee) {
                        likes = likes + &amp;#34;&amp;lt;span class=\&amp;#34;badge badge-success\&amp;#34;&amp;gt;&amp;#34; + r + &amp;#34;&amp;lt;/span&amp;gt; &amp;#34;;
                        document.querySelector(&amp;#34;#likes&amp;#34;).innerHTML = likes;
                    }
                });
            });
        }
    });
}

function like () {
    document.querySelector(&amp;#34;#submit&amp;#34;).disabled = true;
    web3.ss.getAccounts(function (e, address) {
        if (!e) {
            document.querySelector(&amp;#34;#recording&amp;#34;).style.display = &amp;#34;block&amp;#34;;
            document.querySelector(&amp;#34;#submit&amp;#34;).innerHTML = &amp;#34;Please Wait ...&amp;#34;;
            instance.addLike(address, document.querySelector(&amp;#34;#name&amp;#34;).value, {
                gas: 400000,
                gasPrice: 0
            }, function (e, result) {
                console.log(e + &amp;#34; : &amp;#34; + result);
                // ... ...
            });
            setTimeout(function () {
                reload ();
            }, 2 * 1000);
        }
    });
    return false;
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;4.4 Click on the Resources tab, and add the following as resources.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS: &lt;a href=&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&#34;&gt;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript: &lt;a href=&#34;https://code.jquery.com/jquery-3.4.1.min.js&#34;&gt;https://code.jquery.com/jquery-3.4.1.min.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20190920-BUIDL-demo-06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4.5 Click on Run to see your dapp in action and enter your name in BUIDL to test if this works. You will be able to see your name on the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191025-build-your-own-website-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4.6 Finally, you can publish the dapp.&lt;/p&gt;

&lt;p&gt;Just click on the Publish button to name the webpage. Once published, you can share the published URL online for everyone to give you a “like”.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Compile and deploy an ERC20 contract on Ewasm</title>
      <link>http://blog.secondstate.io/post/20191025-compile-and-deploy-an-erc20-contract-on-ewasm/</link>
      <pubDate>Fri, 25 Oct 2019 01:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191025-compile-and-deploy-an-erc20-contract-on-ewasm/</guid>
      
        <description>

&lt;p&gt;&lt;a href=&#34;https://www.secondstate.io/&#34;&gt;Second State&lt;/a&gt; provides open source infrastructure technologies for public and enterprise blockchains. The smart contract compiler toolchain and virtual machine runtimes are critical elements of the infrastructure.&lt;/p&gt;

&lt;p&gt;Through its web-based &lt;a href=&#34;https://www.secondstate.io/buidl/&#34;&gt;BUIDL IDE&lt;/a&gt;, developers can easily access Second State smart contract programming languages, compilers, optimizers, and virtual machines. Even novice developers can write and publish decentralized applications (smart contract + web app) on any Ethereum-compatible blockchain in minutes. See examples on &lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/demo-a-voting-dapp/ethereum-classic&#34;&gt;Ethereum Classic&lt;/a&gt; and &lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/demo-a-voting-dapp/cybermiles&#34;&gt;CyberMiles blockchains&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-soll&#34;&gt;What is SOLL?&lt;/h2&gt;

&lt;p&gt;During the 2019 Ethereum Foundation Devcon5 in Osaka, Japan, Second State &lt;a href=&#34;https://blog.secondstate.io/post/20191014-secondstate-at-devcon5/&#34;&gt;demonstrated the alpha release of its SOLL compiler project&lt;/a&gt;. It is the &lt;strong&gt;world’s first&lt;/strong&gt; LLVM-based toolchain that can compile Solidity smart contracts into WebAssembly bytecode and successfully deploy onto the official Ewasm (Ethereum flavored WebAssembly) testnet.&lt;/p&gt;

&lt;p&gt;With LLVM support, SOLL could not only support multiple  smart contract programming languages, such as Rust and C++, but also support various VMs, such as Ewasm and the EVM 1.x.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;The SOLL Project&lt;/a&gt; is the bridge of general developers and the blockchain world. We invite all developers to try out the SOLL+Ewasm toolchain.&lt;/p&gt;

&lt;h2 id=&#34;talk-is-cheap-show-me-the-code&#34;&gt;Talk is cheap, show me the code&lt;/h2&gt;

&lt;p&gt;Next, we will take an ERC20 contract as an example. We will compile and deploy an ERC20 contract using the SOLL toolchain and deploy on the Ethereum Foundation Ewasm testnet. Let’s get started!&lt;/p&gt;

&lt;h4 id=&#34;connect-metamask-to-ewasm-testnet&#34;&gt;Connect MetaMask to ewasm testnet&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;environment&#34;&gt;Environment&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ docker pull secondstate/soll:demo
$ docker run -it --rm secondstate/soll:demo&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;prepare-contract&#34;&gt;Prepare Contract&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# vim contract.sol&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;contract Token {
  uint256 totalSupply;
  mapping(address =&amp;gt; uint256) balances;

  event Transfer(address indexed _from, address indexed _to, uint256 _value);

  constructor() {
    totalSupply = 100000000;
    balances[msg.sender] = totalSupply;
  }

  function balanceOf(address account) view public returns (uint256) {
    return balances[account];
  }

  function transfer(address to, uint256 amount) public returns (bool) {
    balances[msg.sender] = balances[msg.sender] - amount;
    balances[to] = balances[to] + amount;
    emit Transfer(msg.sender, to, amount);
    return true;
  }
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;compile-contract&#34;&gt;Compile Contract&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Get ABI&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# soll -action=EmitABI contract.sol
[{&amp;#34;inputs&amp;#34;:[],&amp;#34;payable&amp;#34;:false,&amp;#34;stateMutability&amp;#34;:&amp;#34;nonpayable&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;constructor&amp;#34;},{&amp;#34;constant&amp;#34;:true,&amp;#34;inputs&amp;#34;:[{&amp;#34;name&amp;#34;:&amp;#34;account&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;address&amp;#34;}],&amp;#34;name&amp;#34;:&amp;#34;balanceOf&amp;#34;,&amp;#34;outputs&amp;#34;:[{&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;uint256&amp;#34;}],&amp;#34;payable&amp;#34;:false,&amp;#34;stateMutability&amp;#34;:&amp;#34;view&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;function&amp;#34;},{&amp;#34;constant&amp;#34;:false,&amp;#34;inputs&amp;#34;:[{&amp;#34;name&amp;#34;:&amp;#34;to&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;address&amp;#34;},{&amp;#34;name&amp;#34;:&amp;#34;amount&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;uint256&amp;#34;}],&amp;#34;name&amp;#34;:&amp;#34;transfer&amp;#34;,&amp;#34;outputs&amp;#34;:[{&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;bool&amp;#34;}],&amp;#34;payable&amp;#34;:false,&amp;#34;stateMutability&amp;#34;:&amp;#34;nonpayable&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;function&amp;#34;},{&amp;#34;anonymous&amp;#34;:false,&amp;#34;inputs&amp;#34;:[{&amp;#34;indexed&amp;#34;:true,&amp;#34;name&amp;#34;:&amp;#34;_from&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;address&amp;#34;},{&amp;#34;indexed&amp;#34;:true,&amp;#34;name&amp;#34;:&amp;#34;_to&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;address&amp;#34;},&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Get data
```&lt;/p&gt;

&lt;h1 id=&#34;soll-contract-sol-contract-ll&#34;&gt;soll contract.sol &amp;gt; contract.ll&lt;/h1&gt;

&lt;h1 id=&#34;soll-utils-compile-contract-ll&#34;&gt;soll/utils/compile contract.ll&lt;/h1&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ls-l-contract-wasm&#34;&gt;ls -l contract*.wasm&lt;/h1&gt;

&lt;p&gt;-rwxr-xr-x 1 root root 1610 Oct  1 08:53 contract.deploy.wasm
-rwxr-xr-x 1 root root 1483 Oct  1 08:53 contract.wasm&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;* `*.deploy.wasm `is just like `--bin` and `*.wasm` is `--bin-runtime` in EVM world.
Get hex data about `contract.deploy.wasm`&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;xxd-p-contract-deploy-wasm-tr-d-n&#34;&gt;xxd -p contract.deploy.wasm | tr -d $&amp;rsquo;\n&amp;rsquo;&lt;/h1&gt;

&lt;p&gt;
```&lt;/p&gt;

&lt;h4 id=&#34;deploy-contract&#34;&gt;Deploy Contract&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;a href=&#34;http://ewasm.ethereum.org/explorer/tx/submit&#34;&gt;ewasm testnet explorer&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Paste contract data (with prefix 0x)&lt;/li&gt;
&lt;li&gt;Leave destination and value blank (for contract deployment)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Accept at MetaMask and the tx will show up at &lt;a href=&#34;http://ewasm.ethereum.org/explorer/&#34;&gt;ewasm testnet explorer&lt;/a&gt;
&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;View tx detail at &lt;a href=&#34;http://ewasm.ethereum.org/explorer/&#34;&gt;ewasm testnet explorer&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ewasm.ethereum.org/explorer/tx/0xeb63374f3ee569f04455a59817f13b3bcc05d127899a0707362ec5a84504062f&#34;&gt;http://ewasm.ethereum.org/explorer/tx/0xeb63374f3ee569f04455a59817f13b3bcc05d127899a0707362ec5a84504062f&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View contract detail at &lt;a href=&#34;http://ewasm.ethereum.org/explorer/&#34;&gt;ewasm testnet explorer&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ewasm.ethereum.org/explorer/account/0xe48Db28C3F4daA7230B774dC1E7954Fd901de627&#34;&gt;http://ewasm.ethereum.org/explorer/account/0xe48Db28C3F4daA7230B774dC1E7954Fd901de627&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;interact-with-contract&#34;&gt;Interact with Contract&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href=&#34;https://www.secondstate.io/buidl/&#34;&gt;BUIDL&lt;/a&gt; to interact with contract

&lt;ul&gt;
&lt;li&gt;Connect &lt;a href=&#34;https://www.secondstate.io/buidl/&#34;&gt;BUIDL&lt;/a&gt; to MetaMask provider
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compile contract &amp;amp; assign contract address&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;balanceOf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transfer&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Transfer 990 token from MetaMask account to account &lt;code&gt;0x0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check transfer tx at &lt;a href=&#34;http://ewasm.ethereum.org/explorer/&#34;&gt;ewasm testnet explorer&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ewasm.ethereum.org/explorer/tx/0x862f6227c00e9964e283c5eac43998514147e3f8a8654f3ff062b902c51a8890&#34;&gt;http://ewasm.ethereum.org/explorer/tx/0x862f6227c00e9964e283c5eac43998514147e3f8a8654f3ff062b902c51a8890&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-13.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;balanceOf&lt;/code&gt; after &lt;code&gt;transfer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191007-soll-demo-14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;Source code repo to the SOLL project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=X-A6sP_HTy0&#34;&gt;A video demonstration of SOLL on Ewasm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/etclabscore/evm_llvm&#34;&gt;The EVM-LLVM project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/second-state/buidl&#34;&gt;The Second State BUIDL IDE project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/getting-started&#34;&gt;BUIDL Getting Started guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>一文带你了解Devcon5</title>
      <link>http://blog.secondstate.io/post/20191025-devcon5-recap-zh/</link>
      <pubDate>Thu, 24 Oct 2019 09:42:14 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191025-devcon5-recap-zh/</guid>
      
        <description>

&lt;p&gt;以太坊基金会 Devcon 是以太坊生态系统中最重要的开发者、设计师和研究人员的年度聚会。今年在日本大阪举行的 Devcon5 是第五届以太开发大会，与往年一样，Devcon5 是以太坊开发方向的信号灯。&lt;/p&gt;

&lt;p&gt;注：Second State 受邀在 Devcon5 上进行了演讲，我们演示了世界上第一个在 Ewasm 官方测试链上编译和部署 Solidity 智能合约的工具链。&lt;/p&gt;

&lt;h2 id=&#34;最大的新闻是没有新闻&#34;&gt;最大的新闻是没有新闻&lt;/h2&gt;

&lt;p&gt;去年在布拉格的 Devcon4 中，人们对 ETH 2 （安全性）以及以太坊扩容解决方案（通常称为 Plasma）非常乐观。布拉格 Devcon4 的总体感觉是：终于弄清了如何构建可扩展的去中心化智能合约平台了！但是，时间快进到如今 2019 年的大阪 Devcon5，许多乐观情绪都已不见。ETH 2 的深入研究仍然是进行时。过去一年中的许多探索，都未能达到我们期望的结果。&lt;/p&gt;

&lt;p&gt;在大阪，大多数人似乎都同意整个 ETH 2 的工作需要重启，关于 ETH 2 什么时候能够发布的信息几乎没有。也许，Devcon5 最重大的新闻，是压根没有实实在在的 ETH 2 新闻和落到实处的计划。Devcon5 会议的第一天，&lt;a href=&#34;https://www.coindesk.com/scam-or-iteration-at-devcon-ethereum-diehards-still-believe-in-2-0&#34;&gt;CoinDesk&lt;/a&gt; 就此主题发表了一篇有争议的文章。&lt;/p&gt;

&lt;h2 id=&#34;eth-1-x-回来了&#34;&gt;ETH 1.x 回来了&lt;/h2&gt;

&lt;p&gt;正因为离 ETH 2 可能还有好几年，现在人们开始重新专注在如何让今天的以太坊区块链更适合应用程序开发者使用。例如，它将尝试通过更改 gas 费，收取“state 租金”并优化节点客户端存储，以减少节点上 state 数据的膨胀。&lt;/p&gt;

&lt;p&gt;有的讨论是关于如何在 ETH 1.x 区块链上启动下一代基于 WebAssembly 的以太坊虚拟机（称为以太坊 WebAssembly 或 Ewasm）。Ewasm 可以显着改善以太坊上的应用程序开发者体验。但是，Ewasm 工具链和执行引擎仍在开发中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191024-devcon5-racap-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们 &lt;a href=&#34;https://www.secondstate.io/&#34;&gt;Second State&lt;/a&gt; 团队所做的贡献之一，就是创建了世界上第一个能够在官方的 Ewasm 测试网上编译和部署 Solidity 智能合约的&lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;工具链SOLL&lt;/a&gt;。我们的工具链基于 LLVM 基础架构，使其能够跟上编译器社区的未来发展。&lt;a href=&#34;https://blog.secondstate.io/post/20191014-secondstate-at-devcon5-zh/&#34;&gt;点击了解&lt;/a&gt;更多我们为改善 EVM 体验所做的努力。&lt;/p&gt;

&lt;h2 id=&#34;与-etc-和解&#34;&gt;与 ETC 和解&lt;/h2&gt;

&lt;p&gt;以太坊经典（ETC）区块链是原始的 ETH 1.x 区块链。ETC 在保持应用程序层与 ETH 2 的兼容性的同时，仍然致力于实现 PoW 共识。&lt;/p&gt;

&lt;p&gt;随着 ETH 2 转向 PoS 和多链架构（分片），ETC 很有可能会继承 ETH 挖矿社区并成为 ETH 2 生态系统中的 PoW 价值存储（store-of-value）代币。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191024-devcon5-racap-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在 Devcon5 上，ETC Labs 在主旨演讲里探讨了合作和治理。和解的信号呼应了 Devcon5 召开前几天在温哥华举行的&lt;a href=&#34;https://blog.secondstate.io/post/20191006-etc-summit-recap-zh/&#34;&gt;ETC 峰会&lt;/a&gt;上的氛围。很高兴看到 ETH 和 ETC 社区重归于好。我们期待看到 ETC 的更多创新和贡献！&lt;/p&gt;

&lt;h2 id=&#34;layer-2-第-2-层扩容&#34;&gt;Layer 2：第 2 层扩容&lt;/h2&gt;

&lt;p&gt;随着比特币闪电网络的成功启动，开发者 本来对 ETH 的第二层扩展解决方案非常乐观。但是，在过去的一年中，ETH 是第 2 层解决方案的首选方案 Plasma 遇到了许多问题和挫折。在 Devcon5，我们仍然没有有效的 Plasma 解决方案。&lt;/p&gt;

&lt;p&gt;但是，一种全新的方案出现了。 Uniswap 团队展示了专为 Uniswap 交易所应用程序设计和优化的第 2 层解决方案。称为 &lt;a href=&#34;https://unipig.exchange/welcome&#34;&gt;Unipig 交易所&lt;/a&gt;，即时交易确认非常快速。在以太坊测试网上，它的目标是达到 2000 TPS。这种“特定应用程序的第 2 层”方案是否适用于以太坊上最流行的应用程序？答案可能会在明年的 Devcon6 上揭晓。&lt;/p&gt;

&lt;h2 id=&#34;可组合性问题&#34;&gt;可组合性问题&lt;/h2&gt;

&lt;p&gt;随着以太坊发展成为去中心化金融（DeFi）应用的公链，人们对 ETH 2 技术架构提出了严重的担忧。许多 DeFi 应用程序依靠智能合约之间的交互来起作用。例如，贷款合约可能需要与代币合约进行交互以管理其借出的代币。ETH 2 分片具有不同智能合约并可能存在于不同区块链上，是否能够继续保证智能合约之间的确定性交互作用？我们仍然可以构建包含多个智能合约的应用程序吗？这就是 ETH 2 的可组合性，这点在 Devcon5 上引发了很多讨论。&lt;/p&gt;

&lt;p&gt;Devcon 期间，Vitalik Buterin 发表了一篇文章，讨论如何解决这个问题。他的答案是什么呢？大致是说，除了某些条件不行，应用程序开发者仍然可以编写 Defi 智能合约。但是，一些开发者仍然没被说服，因为这些条件可能正是一些 DeFi 应用程序所必须的。感兴趣的读者可以阅读&lt;a href=&#34;https://ethresear.ch/t/cross-shard-defi-composability/6268&#34;&gt; Vitalik 的文章及评论&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;持续专注开发者体验&#34;&gt;持续专注开发者体验&lt;/h2&gt;

&lt;p&gt;以太坊成功的关键，始终是多元化且体量大的开发者社区。这也是为什么 Devcon 一开始就称为 Devcon 的原因。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191024-devcon5-racap-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;本届 Devcon5 持续专注耕耘开发者社区，大会为开发者相关的内容分配了大量的会话和发言时间。Consensys 的 Joseph Rubin 在主旨演讲中，提出了以太坊力争达到 1 百万个开发者的目标。&lt;/p&gt;

&lt;p&gt;Second State 还为新手开发者提供了工具&lt;a href=&#34;https://www.secondstate.io/buidl&#34;&gt;BUIDL IDE&lt;/a&gt;，以帮助所有开发人员快速上手以太坊应用程序开发。试试 BUIDL IDE，您可以几分钟内在公链上发布您的第一个基于 Web 的 dapp！&lt;/p&gt;

&lt;h2 id=&#34;libra-房间里的大象&#34;&gt;Libra ，房间里的大象&lt;/h2&gt;

&lt;p&gt;2019 年的一项重大新闻，是 Facebook 通过 Libra 稳定币项目进军加密货币领域。来自 Cosmos 基金会和以太坊基金会的成员共同宣布了 OpenLibra 项目，该项目旨在创建类似 Libra 的稳定币，不同的是 OpenLibra 具有开源软件和开放治理。但是，以太坊社区中的许多人都不看好这个它。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191024-devcon5-racap-04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;尽管 Facebook Libra 最近遭到监管机构和合作伙伴的质疑，我相信 Libra 作为一项加密货币实验和软件创新将在未来几年内不会过时。感兴趣的读者可以查看我们有关 &lt;a href=&#34;https://blog.secondstate.io/tags/libra/&#34;&gt;Libra 的MOVE 语言和VM 的文章&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;路在何方&#34;&gt;路在何方&lt;/h2&gt;

&lt;p&gt;总体而言，Devcon5 上的经历是比较愉快的。大阪是举行会议的好地方-治安优良，干净整洁，食物美味可口，交通非常便利。虽然 ETH 2 和 Plasma 开发遭受了挫折，但社区仍然继续吸引开发者并寻找前进的方法。&lt;/p&gt;

&lt;p&gt;相信随着以太坊 1.x 资金的增加（来自以太坊基金会和 ETC Labs），我相信我们将在以太坊应用程序层持续看到创新和改进，包括新的 Ewasm 虚拟机，工具和特定于应用程序的第 2 层解决方案。对以太坊的未来，我们保持乐观。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>What I learned from Ethereum Devcon5</title>
      <link>http://blog.secondstate.io/post/20191024-devcon5-recap/</link>
      <pubDate>Thu, 24 Oct 2019 01:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191024-devcon5-recap/</guid>
      
        <description>

&lt;p&gt;The Ethereum Foundation Devcon is the most important annual gathering of developers, designers, and researchers in the Ethereum ecosystem. This year’s Devcon5 in Osaka, Japan is the 5th Devcon, and as in past years, it is a bellwether of what to come in Ethereum.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: My company, &lt;a href=&#34;https://www.secondstate.io/&#34;&gt;Second State&lt;/a&gt;, was invited to &lt;a href=&#34;https://blog.secondstate.io/post/20191014-secondstate-at-devcon5/&#34;&gt;give a talk at Devcon5&lt;/a&gt;, where we showed off &lt;a href=&#34;https://blog.secondstate.io/post/20191022-soll-compiler-project/&#34;&gt;the world&amp;rsquo;s first toolchain&lt;/a&gt; to compile and deploy Solidity smart contracts on the official Ewasm testnet. &lt;a href=&#34;https://www.secondstate.io/devcon5/&#34;&gt;Learn more&lt;/a&gt; about Second State’s smart contract innovation and developer tools @Devcon5.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;no-news-is-big-news&#34;&gt;No news is big news&lt;/h2&gt;

&lt;p&gt;In Devcon4 in Prague last year, there was great optimism about ETH 2 (Serenity), as well as Ethereum scaling solutions generally known as Plasma. The overall sentiment in Prague was that we have finally figured out how to build scalable decentralized smart contract platforms. However, fast forward to Osaka in 2019, much of optimism is gone. ETH 2 is still under intensive research. Many experiments in the past year had not produced the results we hoped for.&lt;/p&gt;

&lt;p&gt;In Osaka, most people seem to agree that the entire ETH 2 effort requires a reboot. There was very little information about the launch of ETH 2. The lack of concrete ETH 2 news and concrete plans is perhaps the most significant news from Devcon5. CoinDesk published a &lt;a href=&#34;https://www.coindesk.com/scam-or-iteration-at-devcon-ethereum-diehards-still-believe-in-2-0&#34;&gt;controversial article&lt;/a&gt; on this subject on the very first day of the conference.&lt;/p&gt;

&lt;h2 id=&#34;eth-1-x-is-baaaack&#34;&gt;ETH 1.x is baaaack&lt;/h2&gt;

&lt;p&gt;With ETH 2 still perhaps years away, there is now renewed focus on making the Ethereum blockchain we have today more usable for application developers. For example, it will attempt to reduce the bloat of state data on nodes by making changes to gas fees, instituting a “state rent”, and optimizing node client storage.&lt;/p&gt;

&lt;p&gt;There are also discussions about launching the next generation WebAssembly-based Ethereum Virtual Machine (known as Ethereum flavored WebAssembly, or Ewasm) on the ETH 1.x blockchain. That could significantly improve application developer experience on Ethereum. However, the Ewasm toolchain and execution engine are still work-in-progress.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191024-devcon5-racap-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One of the contributions my team at Second State made was to create the &lt;a href=&#34;https://blog.secondstate.io/post/20191022-soll-compiler-project/&#34;&gt;world’s first toolchain&lt;/a&gt; to compile and deploy Solidity smart contracts on the official Ewasm testnet. Our toolchain is based on the LLVM infrastructure, making it future proof. You can &lt;a href=&#34;https://www.secondstate.io/devcon5/&#34;&gt;read more&lt;/a&gt; about our effort to improve the EVM experience.&lt;/p&gt;

&lt;h2 id=&#34;reconciliation-with-etc&#34;&gt;Reconciliation with ETC&lt;/h2&gt;

&lt;p&gt;The Ethereum Classic (ETC) blockchain is the original ETH 1.x blockchain. It remains committed to PoW consensus while trying to maintain compatibility with ETH 2 at the application layer.&lt;/p&gt;

&lt;p&gt;With ETH 2’s move to PoS and multi-chain architecture (sharding), it is possible that ETC will inherit the ETH mining community and become a PoW store-of-value token in the ETH 2 ecosystem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191024-devcon5-racap-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At Devcon5, ETCLabs got on the main stage to discuss collaboration and governance. The message of reconciliation echoes the sentiment at &lt;a href=&#34;https://blog.secondstate.io/post/20191006-etc-summit-recap/&#34;&gt;ETC Summit&lt;/a&gt; in Vancouver a few days prior to Devcon5. It is great to see the ETH and ETC communities making amends. We look forward to seeing more innovations and contributions from ETC!&lt;/p&gt;

&lt;h2 id=&#34;layer-2-scaling&#34;&gt;Layer 2 scaling&lt;/h2&gt;

&lt;p&gt;With the successful launch of the Bitcoin lightning network, developers were very optimistic about layer 2 scaling solutions for ETH. However, in the past year, Plasma, ETH’s leading candidate for Layer 2 solutions had encountered many problems and setbacks. At Devcon5, we still do not have a working Plasma solution.&lt;/p&gt;

&lt;p&gt;However, a new approach emerged. The Uniswap team demonstrated a layer 2 solution that is specifically designed and optimized for the Uniswap Exchange application. It is called the &lt;a href=&#34;https://unipig.exchange/&#34;&gt;Unipig Exchange&lt;/a&gt;. You can go try it out. It is very fast with instant trade confirmations. On Ethereum testnet, it aims to reach 2000 TPS. Would this “application specific layer 2” approach work for most popular applications on Ethereum? We will probably find out in Devcon6 next year.&lt;/p&gt;

&lt;h2 id=&#34;the-composability-problem&#34;&gt;The composability problem&lt;/h2&gt;

&lt;p&gt;As the Ethereum evolves to become the public blockchain for decentralized finance (DeFi) applications, a serious concern about the ETH 2 technical architecture was raised. Many DeFi applications rely on the interactions between smart contracts to function. For example, a loan contract might need to interact with token contracts to manage the tokens it lends. Would ETH 2 sharding, with different smart contracts potentially living on different blockchains, continue to guarantee deterministic interactions between smart contracts? Can we still build applications that compose multiple smart contracts? This is known as the composability for ETH 2, and it received a lot of discussion at Devcon5.&lt;/p&gt;

&lt;p&gt;During the conference, Vitalik Buterin &lt;a href=&#34;https://ethresear.ch/t/cross-shard-defi-composability/6268&#34;&gt;published an article&lt;/a&gt; addressing this issue. His answer? By and large, application developers can still compose smart contracts except for certain conditions. However, some developers remain unconvinced, as those conditions might just be some DeFi apps require. Interested readers should checkout Vitalik’s article and its comments thread.&lt;/p&gt;

&lt;h2 id=&#34;continued-focus-on-developer-experience&#34;&gt;Continued focus on developer experience&lt;/h2&gt;

&lt;p&gt;The diverse and large developer community is always key to the success of Ethereum. It is also why Devcon is called Devcon to begin with.&lt;/p&gt;

&lt;p&gt;In Devcon5, there is a continued focus on developer communities. A lot of sessions and speaking time were allocated for developer related content. Joseph Rubin of Consensys went on the main stage and raised the goal of one million Ethereum developers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191024-devcon5-racap-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At Second State, we provide &lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/why-buidl&#34;&gt;tools for even novice developers&lt;/a&gt; to quickly get started with Ethereum application development. &lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/getting-started&#34;&gt;Checkout the BUIDL IDE&lt;/a&gt; and you could publish your first web-based dapp on a public blockchain in minutes!&lt;/p&gt;

&lt;h2 id=&#34;libra-the-elephant-in-the-room&#34;&gt;Libra, the elephant in the room&lt;/h2&gt;

&lt;p&gt;One of the big news in 2019 was Facebook’s entrance into cryptocurrency space via the Libra stablecoin project. The members from the Cosmos Foundation and Ethereum Foundation banded together to announce the OpenLibra project, which aims to create a Libra-like stablecoin, but with open source software and open governance. Many in the Ethereum community, however, do not like this idea.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191024-devcon5-racap-04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While Facebook Libra has recently suffered push backs from regulators and partners alike, I believe Libra as a cryptocurrency experiment and software innovation will remain relevant in the years to come. Interested readers could check out &lt;a href=&#34;https://medium.com/hackernoon/libra-first-impressions-ed6b5f15ae63&#34;&gt;our articles&lt;/a&gt; on Libra’s MOVE language and VM.&lt;/p&gt;

&lt;h2 id=&#34;the-road-ahead&#34;&gt;The road ahead&lt;/h2&gt;

&lt;p&gt;Overall, I enjoyed my experience at Devcon5. Osaka is a great place to hold such a conference — very safe and clean, great food, easy to get around. While ETH 2 and Plasma development suffered setbacks, the community continues to engage developers and find ways to move forward.&lt;/p&gt;

&lt;p&gt;With increased funding for Ethereum 1.x (both from Ethereum Foundation and ETC Labs), I believe that we will continue to see innovations and improvements on the Ethereum application layer, including the new Ewasm virtual machine, tooling, and application-specific layer 2 solutions. We remain optimistic about the future of Ethereum.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>教程|5分钟建一个去中心化的网站</title>
      <link>http://blog.secondstate.io/post/20191024-build-website-zh/</link>
      <pubDate>Wed, 23 Oct 2019 20:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191024-build-website-zh/</guid>
      
        <description>

&lt;p&gt;不用买域名，购买虚拟主机空间，设置域名服务器，工信部备案等等繁琐的流程。&lt;/p&gt;

&lt;p&gt;5分钟学会自己建一个去中心化的网站，从此做网站不求人！永久留存，完全去中心化！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191024-build-website-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这样一个网站可以让你写上自己说的话，并可以实现访问这个网页与网页进行交互，为你的网站点赞！&lt;/p&gt;

&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;

&lt;p&gt;1.在电脑浏览器打开&lt;a href=&#34;https://buidl.secondstate.io&#34;&gt;https://buidl.secondstate.io&lt;/a&gt; (推荐使用Chrome 浏览器)&lt;/p&gt;

&lt;p&gt;2.检查开发工具BUIDL 是否连接到区块链上&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191020-public-comment-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;检查方法：查看页面左下方 Providers 是否是绿色图标，绿色表明已经连接到Second State DevChain链上，红色表明尚未连接，请刷新重试。&lt;/p&gt;

&lt;h2 id=&#34;完成区块链网页后端-智能合约&#34;&gt;完成区块链网页后端——智能合约&lt;/h2&gt;

&lt;p&gt;1.点击红色的Contract，清空默认代码，将下面的智能合约代码粘贴上去&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;pragma solidity &amp;gt;= 0.4.0;

contract Celebration {

    string public greeting;
    mapping (address =&amp;gt; string) likes;
    address [] addrs;

    constructor(string _greeting) public {
        greeting = _greeting;
    }

    function addLike (address _addr, string _name) public {
        likes[_addr] = _name;
        addrs.push(_addr);
    }

    function getLikeName(address _addr) public view returns(string) {
        return likes[_addr];
    }

    function getAddrs () public view returns (address []) {
        return addrs;
    }
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;2.点击右上角Compile，在 _greeting 的横线处输入你想在网页上显示的的话，比如，程序员快乐~ 之后点击 Deploy to the chain。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20190920-BUIDL-demo-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这一步实施的是将合约部署到Second State DevChain上，部署成功的标志是在页面左上角出现合约名字 PublicComments 及TX和Address，页面下方log 出现TX 及 Success 字样。（小科普：TX是这笔交易的哈希值，是唯一的。Address 是合约地址，也是唯一的）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20190920-BUIDL-demo-04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;到这里我们就把区块链网站的后端写完了，这部分叫做智能合约，负责与区块链互动。区块链应用不可篡改，去中心化等特性主要由智能合约体现。&lt;/p&gt;

&lt;h2 id=&#34;网页前端&#34;&gt;网页前端&lt;/h2&gt;

&lt;p&gt;1.点击绿色的Dapp，可以看到HTML，CSS，JS三个模块，清空这三个模块的代码。&lt;/p&gt;

&lt;p&gt;将下面的代码粘贴到HTML 模块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
    &amp;lt;br/&amp;gt;
    &amp;lt;div class=&amp;#34;jumbotron&amp;#34;&amp;gt;
        &amp;lt;p class=&amp;#34;lead&amp;#34; id=&amp;#34;greeting&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;hr/&amp;gt;
        &amp;lt;form id=&amp;#34;form&amp;#34; class=&amp;#34;form-inline&amp;#34;&amp;gt;
            &amp;lt;div class=&amp;#34;form-group mx-sm-3 mb-2&amp;#34;&amp;gt;
                &amp;lt;input type=&amp;#34;text&amp;#34; class=&amp;#34;form-control&amp;#34; id=&amp;#34;name&amp;#34; placeholder=&amp;#34;Your Name&amp;#34;&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&amp;#34;alert alert-primary&amp;#34; role=&amp;#34;alert&amp;#34; id=&amp;#34;recording&amp;#34; style=&amp;#34;display:none&amp;#34;&amp;gt;
                Recording on the Second State DevChain.Please wait up to 5 seconds for confirmation.
            &amp;lt;/div&amp;gt;
            &amp;lt;button type=&amp;#34;button&amp;#34; id=&amp;#34;submit&amp;#34; onclick=&amp;#34;like();&amp;#34; class=&amp;#34;btn btn-primary mb-2&amp;#34;&amp;gt;Like👍&amp;lt;/button&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;p id=&amp;#34;me&amp;#34; style=&amp;#34;display:none&amp;#34;&amp;gt;Thank you, &amp;lt;span id=&amp;#34;myname&amp;#34; class=&amp;#34;badge badge-info&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p id=&amp;#34;likes&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div style=&amp;#34;text-align:center&amp;#34;&amp;gt;
    &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
    Created by the &amp;lt;a href=&amp;#34;https://buidl.secondstate.io/&amp;#34;&amp;gt;BUIDL IDE&amp;lt;/a&amp;gt;
     &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
    [&amp;lt;a href=&amp;#34;https://docs.secondstate.io/buidl-developer-tool/why-buidl&amp;#34;&amp;gt;了解更多&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;https://blog.secondstate.io/post/20191024-build-website-zh/&amp;#34;&amp;gt;教程&amp;lt;/a&amp;gt;]
&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;将下面的代码粘贴到JS 模块，从 var instance 开始粘贴。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;/* Don&amp;#39;t modify */
这里的代码不要改，从var instance = null; 开始复制
/* Don&amp;#39;t modify */

var instance = null;
window.addEventListener(&amp;#39;web3Ready&amp;#39;, function() {
  var contract = web3.ss.contract(abi);
  instance = contract.at(cAddr);
  reload();
});

function reload() {
    document.querySelector(&amp;#34;#greeting&amp;#34;).innerHTML = instance.greeting();
    web3.ss.getAccounts(function (e, address) {
        if (!e) {
            var myName = instance.getLikeName(address);
            if (myName) {
                document.querySelector(&amp;#34;#form&amp;#34;).style.display = &amp;#34;none&amp;#34;;
                document.querySelector(&amp;#34;#me&amp;#34;).style.display = &amp;#34;block&amp;#34;;
                document.querySelector(&amp;#34;#myname&amp;#34;).innerHTML = myName;
            }
            
            var likes = &amp;#34;Liked by &amp;#34;;
            var addrs = instance.getAddrs();
            addrs.forEach(function(addr) {
                instance.getLikeName(addr, function (ee, r) {
                    if (!ee) {
                        likes = likes + &amp;#34;&amp;lt;span class=\&amp;#34;badge badge-success\&amp;#34;&amp;gt;&amp;#34; + r + &amp;#34;&amp;lt;/span&amp;gt; &amp;#34;;
                        document.querySelector(&amp;#34;#likes&amp;#34;).innerHTML = likes;
                    }
                });
            });
        }
    });
}

function like () {
    document.querySelector(&amp;#34;#submit&amp;#34;).disabled = true;
    web3.ss.getAccounts(function (e, address) {
        if (!e) {
            document.querySelector(&amp;#34;#recording&amp;#34;).style.display = &amp;#34;block&amp;#34;;
            document.querySelector(&amp;#34;#submit&amp;#34;).innerHTML = &amp;#34;Please Wait ...&amp;#34;;
            instance.addLike(address, document.querySelector(&amp;#34;#name&amp;#34;).value, {
                gas: 400000,
                gasPrice: 0
            }, function (e, result) {
                console.log(e + &amp;#34; : &amp;#34; + result);
                // ... ...
            });
            setTimeout(function () {
                reload ();
            }, 2 * 1000);
        }
    });
    return false;
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;2.BUIDL 是一个开源的开发工具，支持添加开源的代码资源，点击Resources 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20190920-BUIDL-demo-06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在JavaScript 点击加号，将下面的JS资源粘贴到弹窗里：&lt;a href=&#34;https://code.jquery.com/jquery-3.4.1.min.js&#34;&gt;https://code.jquery.com/jquery-3.4.1.min.js&lt;/a&gt; 并点击确定。&lt;/p&gt;

&lt;p&gt;在CSS 处点击加号，将下面的CSS 资源粘贴到弹窗里：&lt;a href=&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&#34;&gt;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&lt;/a&gt; 并点击确定。&lt;/p&gt;

&lt;p&gt;3.点击最左边的Run，会在页面右侧预览网页样式。然后来输入自己的名字，做个测试吧!
&lt;img src=&#34;http://blog.secondstate.io/images/20191024-build-website-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4.点击页面上方的Publish，输入自己网站的名称，比如1024，然后等待大概30秒，点击launched 就可以看到自己的网页。&lt;/p&gt;

&lt;p&gt;最后把自己的网页分享到社交媒体，让亲朋好友给自己点赞，赢取奖品吧！&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Second State SOLL 编译器项目获得以太坊基金会的现金奖励</title>
      <link>http://blog.secondstate.io/post/20191022-soll-compiler-project-zh/</link>
      <pubDate>Tue, 22 Oct 2019 01:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191022-soll-compiler-project-zh/</guid>
      
        <description>

&lt;p&gt;&lt;a href=&#34;https://www.secondstate.io/&#34;&gt;Second State&lt;/a&gt; 是领先的面向区块链智能合约的开源基础架构软件的提供者，因为对&lt;a href=&#34;https://www.secondstate.io/&#34;&gt;开源SOLL编译器项目&lt;/a&gt;的贡献，获得了以太坊基金会的现金奖励。2019年10月20日在台北举行的CrossLink活动中，以太坊基金会的Vitalik Buterin向Second State 团队颁发了5000美元的奖金。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191022-soll-project-01.jpg&#34; alt=&#34;SOLL project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOLL是世界上第一个将Solidity智能合约编译为WebAssembly字节码，并成功部署到以太坊基金会官方Ewasm（以太坊WebAssembly）测试网中的工具链。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本月初，Second State团队在日本大阪的2019年以太坊基金会Devcon5上&lt;a href=&#34;https://www.youtube.com/watch?v=X-A6sP_HTy0&#34;&gt;demo 了SOLL编译器项目的早期版本&lt;/a&gt;。&lt;a href=&#34;https://www.secondstate.io/devcon5/&#34;&gt;点此了解更多&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;走向eth-2-的重要路径&#34;&gt;走向ETH 2 的重要路径&lt;/h2&gt;

&lt;p&gt;根据ETH 2 路线图的规划，ETH 2 需要一种新的智能合约执行引擎，称为Ewasm（以太坊WebAssembly）虚拟机。但是，经过多年的开发，针对Ewasm 的开发工具链仍然缺失。在SOLL 之前，没有简单的工具可以将Solidity 智能合约编译并部署到基于Ewasm 的区块链上。&lt;/p&gt;

&lt;p&gt;通过对LLVM 的支持，SOLL 不仅完善了Ewasm 缺少的工具链，还把现代编译器基础结构引入了Solidity 编程语言。&lt;/p&gt;

&lt;p&gt;有了对LLVM 的支持，SOLL 不仅可以在前端支持多种智能合约编程语言，例如Rust和C ++，而且可以在后端支持各种VM，例如Ewasm和EVM1.x。区块链上的应用程序开发将更加灵活和高效。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Second State首席执行官&lt;a href=&#34;http://www.michaelyuan.com/&#34;&gt;Michael Yuan&lt;/a&gt; 博士解释了SOLL 项目背后的基本原理，“ SOLL 项目在企业开发人员和区块链世界之间架起了一座桥梁。我们欢迎所有开发人员使用为Ewasm 设计的SOLL 工具链。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;超越ewasm&#34;&gt;超越Ewasm&lt;/h2&gt;

&lt;p&gt;能够在后端支持多个执行引擎，这是基于LLVM的编译器工具链的主要优点。例如，Second State与ETC Labs之间正在进行的合作，正在朝着SOLL的EVM 1.0 后端努力。这使得基于LLVM的工具和优化功能可以在现有的基于EVM的区块链上使用，例如以太经典（Ethereum Classic），CyberMiles等。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;以太经典的核心开发Alan Li表示：“ SOLL EVM 项目的前进非常令人兴奋，将有效地塑造以EVM执行环境为基础构建的整个DApp 生态系统。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此外，Second State将把SOLL 编译器工具链合并到非常易于使用的基于Web 的&lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/why-buidl&#34;&gt;BUIDL IDE&lt;/a&gt; 中。BUIDL IDE 以智能合约作为后端，以web3作为前端，可以在数分钟内构建和部署完整的DApp。&lt;/p&gt;

&lt;p&gt;延伸阅读&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;SOLL项目源代码repo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=X-A6sP_HTy0&#34;&gt;关于Ewasm的SOLL的视频演示&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/etclabscore/evm_llvm&#34;&gt;EVM-LLVM项目&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/second-state/buidl&#34;&gt;Second State BUIDL IDE项目&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/getting-started&#34;&gt;BUIDL入门指南&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Second State receives a prestigious award from the Ethereum Foundation for the SOLL compiler</title>
      <link>http://blog.secondstate.io/post/20191022-soll-compiler-project/</link>
      <pubDate>Tue, 22 Oct 2019 01:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191022-soll-compiler-project/</guid>
      
        <description>

&lt;p&gt;(Oct 20th, 2019, Taipei) - &lt;a href=&#34;https://www.secondstate.io/&#34;&gt;Second State&lt;/a&gt;, a leading provider of open source infrastructure software for blockchain smart contracts, has been awarded a cash prize for its contribution to the open source &lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;SOLL compiler project&lt;/a&gt;. Vitalik Buterin from the Ethereum Foundation presented Hung-Ying Tai from Second State with the $5000 prize at the CrossLink event in Taipei on Oct 20th, 2019.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191022-soll-project-01.jpg&#34; alt=&#34;SOLL project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;SOLL is the &lt;em&gt;world’s first&lt;/em&gt;  toolchain that compiles Solidity smart contracts into WebAssembly bytecode and successfully deploys onto Ethereum Foundation’s official Ewasm (Ethereum flavored WebAssembly) testnet.&lt;/p&gt;

&lt;p&gt;The Second State team &lt;a href=&#34;https://www.youtube.com/watch?v=X-A6sP_HTy0&#34;&gt;demonstrated&lt;/a&gt; an early release of its SOLL compiler project at the 2019 Ethereum Foundation Devcon5 at Osaka, Japan. Learn more here (&lt;a href=&#34;https://www.secondstate.io/devcon5/&#34;&gt;https://www.secondstate.io/devcon5/&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;on-the-critical-path-to-eth-2&#34;&gt;On the critical path to ETH 2&lt;/h2&gt;

&lt;p&gt;The ETH 2 roadmap calls for a new smart contract execution engine known as the Ewasm (Ethereum flavored WebAssembly) virtual machine. However, after years of development, the developer toolchain around Ewasm is still missing. Prior to SOLL, there were no easy tools to compile and deploy Solidity smart contracts to Ewasm-based blockchains.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;SOLL&lt;/a&gt; not only completes the missing toolchain for Ewasm, but also brings modern compiler infrastructure to the Solidity programming language through its support for the LLVM. You can watch a video demonstration on &lt;a href=&#34;https://www.youtube.com/watch?v=X-A6sP_HTy0&#34;&gt;how to use SOLL to compile an ERC20 contract in Solidity and then deploy it on the official Ewasm testnet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With LLVM support, SOLL could not only support multiple  smart contract programming languages on the front end, such as Rust and C++, but also support various VMs on the back end, such as Ewasm and the EVM 1.x. Application development on the blockchain will be more flexible and efficient.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.michaelyuan.com/&#34;&gt;Michael Yuan&lt;/a&gt;, CEO of Second State, explained the rationale behind the SOLL project. He said “the SOLL Project builds a bridge between enterprise developers and the blockchain world. We invite all developers to try out the SOLL for Ewasm toolchain.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;beyond-ewasm&#34;&gt;Beyond Ewasm&lt;/h2&gt;

&lt;p&gt;A key benefit of an LLVM-based compiler toolchain is the ability to support multiple execution engines on the backend. For example, &lt;a href=&#34;https://blog.secondstate.io/post/20190901-etc-partners-with-secondstate/&#34;&gt;the ongoing collaboration between Second State and ETC Labs&lt;/a&gt; is working toward an EVM 1.0 backend for SOLL. That allows LLVM-based tools and optimizations to become available on today’s EVM-based blockchains, such as the Ethereum Classic, CyberMiles, and many others.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The SOLL EVM project has a very exciting journey ahead as it will effectively shape the entire dapps ecosystem built around the EVM execution environment,” said Alan Li, the core developer of Ethereum Classic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Furthermore, the Second State BUIDL tool aims to incorporate the SOLL compiler toolchain into a very easy-to-use web-based IDE. The &lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/getting-started&#34;&gt;BUIDL IDE&lt;/a&gt; can build and deploy complete dapps with smart contract as backend and web3 as front end within minutes.&lt;/p&gt;

&lt;p&gt;Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;Source code repo to the SOLL project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=X-A6sP_HTy0&#34;&gt;A video demonstration of SOLL on Ewasm&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/etclabscore/evm_llvm&#34;&gt;The EVM-LLVM project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/second-state/buidl&#34;&gt;The Second State BUIDL IDE project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/getting-started&#34;&gt;BUIDL Getting Started guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;About Second State&lt;/p&gt;

&lt;p&gt;Second State focuses on building and commercializing open-source blockchain infrastructure software. It develops a full stack of developer tools and runtime technologies for smart contract platforms, including the BUIDL IDE. Based in Austin, Texas, Second State has development offices in China (Beijing and Taipei) and Australia. A member of the ETC Labs incubator program, it recently closed a $3 million funding round led by Susquehanna International Group.&lt;/p&gt;

&lt;p&gt;Founded in 2019, Second State’s vision is that complex, versatile business applications will drive enterprise blockchain adoption. Unlike traditional blockchain software providers who focus on the data ledger, Second State develops and commercializes “blockchain middleware,” which consists of &lt;a href=&#34;https://github.com/second-state/lityvm&#34;&gt;virtual machine&lt;/a&gt;, &lt;a href=&#34;https://www.litylang.org/business_rules/&#34;&gt;rules engine&lt;/a&gt;, &lt;a href=&#34;https://github.com/second-state/smart-contract-search-engine&#34;&gt;search engine&lt;/a&gt;, and data services that empower a new generation of blockchain applications with much-improved user experience and developer productivity.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>如何使用BUIDL 发起投票议题</title>
      <link>http://blog.secondstate.io/post/20191020-public-comment-zh/</link>
      <pubDate>Sun, 20 Oct 2019 01:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191020-public-comment-zh/</guid>
      
        <description>

&lt;p&gt;在区块链世界里，您留下的评论会永远留存，不能被篡改，永远不会消失~&lt;/p&gt;

&lt;h2 id=&#34;dapp小科普&#34;&gt;DApp小科普&lt;/h2&gt;

&lt;p&gt;区块链应用（DApp）通常以智能合约为后端，以HTML 和 JavaScript为前端。智能合约是区块链应用的核心，负责与区块链互动，现下流行的智能合约语言有Solidity 和Lity。&lt;/p&gt;

&lt;p&gt;区块链的不可篡改，永久留存特性通常由智能合约来保证。&lt;/p&gt;

&lt;h2 id=&#34;在开始之前-您需要准备以下工作&#34;&gt;在开始之前，您需要准备以下工作&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;#1&lt;/em&gt; 在电脑浏览器打开 &lt;a href=&#34;https://buidl.secondstate.io&#34;&gt;https://buidl.secondstate.io&lt;/a&gt;（推荐使用Chrome 浏览器）&lt;/p&gt;

&lt;p&gt;&lt;em&gt;#2&lt;/em&gt; 检查开发工具BUIDL是否连接到区块链上&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191020-public-comment-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;检查方法：查看页面左下方 Providers 是否是绿色图标，绿色表明已经连接到Second State DevChain链上，红色表明尚未连接，请刷新重试。如果多次刷新后，仍然是红色，请及时告知。&lt;/p&gt;

&lt;h2 id=&#34;区块链网页后端-智能合约&#34;&gt;区块链网页后端——智能合约&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;#1&lt;/em&gt; 点击红色的Contract，清空默认代码，将下面的智能合约代码粘贴上去&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;pragma solidity &amp;gt;= 0.4.0;

contract PublicComments {

    address owner;
    string public greeting;
    struct Comment {
        string name;
        string email;
        string comment;
    }
    mapping (address =&amp;gt; Comment) comments;
    address [] addrs;

    constructor (string _greeting) public {
        owner = msg.sender;
        greeting = _greeting;
    }

    function setGreeting (string _greeting) public {
        require (msg.sender == owner);
        greeting = _greeting;
    }

    function addComment (string _name, string _email, string _comment) public {
        comments[msg.sender] = Comment(_name, _email, _comment);
        addrs.push(msg.sender);
    }

    function getComment(address _addr) public constant returns(string, string, string) {
        return (comments[_addr].name, comments[_addr].email, comments[_addr].comment);
    }

       function getAddrs () public constant returns (address []) {
        return addrs;
    }
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;#2&lt;/em&gt; 点击右上角Compile，在 _greeting 的横线处输入你想要征集的问题，之后点击 Deploy to the chain&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191020-public-comment-03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这一步实施的是将合约部署到Second State DevChain上，部署成功的标志是在页面左上角出现合约名字 PublicComments 及TX和Address，页面下方log 出现TX 及 Success 字样。（小科普：TX是这笔交易的哈希值，是唯一的。Address 是合约地址，也是唯一的）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191020-public-comment-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;到这里我们就把区块链网站的后端写完了，这部分叫做智能合约，负责与区块链互动。区块链应用的特性主要由智能合约体现。&lt;/p&gt;

&lt;h2 id=&#34;区块链网页前端&#34;&gt;区块链网页前端&lt;/h2&gt;

&lt;p&gt;接下来是前端部分。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;#1&lt;/em&gt; 点击绿色的Dapp，可以看到HTML，CSS，JS三个模块，清空这三个模块的代码。&lt;/p&gt;

&lt;p&gt;将下面的代码粘贴到HTML 模块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
    &amp;lt;br/&amp;gt;
    &amp;lt;div class=&amp;#34;jumbotron&amp;#34;&amp;gt;
        &amp;lt;p class=&amp;#34;lead&amp;#34; id=&amp;#34;greeting&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;hr/&amp;gt;
        &amp;lt;form id=&amp;#34;form&amp;#34;&amp;gt;
            &amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt;
                &amp;lt;label for=&amp;#34;name&amp;#34;&amp;gt;Name&amp;lt;/label&amp;gt;
                &amp;lt;input type=&amp;#34;text&amp;#34; class=&amp;#34;form-control&amp;#34; id=&amp;#34;name&amp;#34; placeholder=&amp;#34;&amp;#34;&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt;
                &amp;lt;label for=&amp;#34;email&amp;#34;&amp;gt;Email&amp;lt;/label&amp;gt;
                &amp;lt;input type=&amp;#34;email&amp;#34; class=&amp;#34;form-control&amp;#34; id=&amp;#34;email&amp;#34; placeholder=&amp;#34;&amp;#34;&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt;
                &amp;lt;label for=&amp;#34;comment&amp;#34;&amp;gt;Comment&amp;lt;/label&amp;gt;
                &amp;lt;input type=&amp;#34;text&amp;#34; class=&amp;#34;form-control&amp;#34; id=&amp;#34;comment&amp;#34; placeholder=&amp;#34;&amp;#34;&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;button type=&amp;#34;button&amp;#34; id=&amp;#34;submit&amp;#34; class=&amp;#34;btn btn-primary&amp;#34;&amp;gt;Send Comment&amp;lt;/button&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;div id=&amp;#34;formSubmitted&amp;#34; style=&amp;#34;display:none&amp;#34;&amp;gt;Please wait up to 5 seconds for confirmation ...&amp;lt;/div&amp;gt;
        &amp;lt;p id=&amp;#34;me&amp;#34; style=&amp;#34;display:none&amp;#34;&amp;gt;Thank you, &amp;lt;span id=&amp;#34;myname&amp;#34; class=&amp;#34;badge badge-info&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    
    &amp;lt;table class=&amp;#34;table table-striped&amp;#34;&amp;gt;
        &amp;lt;thead&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th scope=&amp;#34;col&amp;#34;&amp;gt;Name&amp;lt;/th&amp;gt;
                &amp;lt;th scope=&amp;#34;col&amp;#34;&amp;gt;Comment&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody id=&amp;#34;likes&amp;#34;&amp;gt;
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;p style=&amp;#34;text-align:center&amp;#34;&amp;gt;Created with &amp;lt;a target=&amp;#34;_blank&amp;#34; href=&amp;#34;https://docs.secondstate.io/buidl-developer-tool/why-buidl&amp;#34;&amp;gt;the BUIDL IDE&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;将下面的代码粘贴到JS 模块，从 var instance 开始粘贴。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;/* Don&amp;#39;t modify */
这里不要改
/* Don&amp;#39;t modify */
var instance = null;
window.addEventListener(&amp;#39;web3Ready&amp;#39;, function() {
  var contract = web3.ss.contract(abi);
  instance = contract.at(cAddr);
  reload();
});

function reload() {
    instance.greeting(function (e, r) {
        $(&amp;#34;#greeting&amp;#34;).html(r);
    });
    
    $(&amp;#34;#form&amp;#34;).css(&amp;#34;display&amp;#34;, &amp;#34;block&amp;#34;);
    $(&amp;#34;#formSubmitted&amp;#34;).css(&amp;#34;display&amp;#34;, &amp;#34;none&amp;#34;);
    $(&amp;#34;#me&amp;#34;).css(&amp;#34;display&amp;#34;, &amp;#34;none&amp;#34;);
    web3.ss.getAccounts(function (e, address) {
        if (!e) {
            instance.getComment(address, function (ee, result) {
                if (result[0]) {
                    $(&amp;#34;#form&amp;#34;).css(&amp;#34;display&amp;#34;, &amp;#34;none&amp;#34;);
                    $(&amp;#34;#me&amp;#34;).css(&amp;#34;display&amp;#34;, &amp;#34;block&amp;#34;);
                    $(&amp;#34;#myname&amp;#34;).html(result[0]);
                }
            });
            
            var likes = &amp;#34;&amp;#34;;
            instance.getAddrs(function (ee, addrs) {
                addrs.forEach(function(addr) {
                    instance.getComment(addr, function (ee, r) {
                        if (!ee) {
                            likes = likes + &amp;#34;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;#34; + r[0] + &amp;#34;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;#34; + r[2] + &amp;#34;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;#34;;
                            $(&amp;#34;#likes&amp;#34;).html(likes);
                        }
                    });
                });
            });
            $(&amp;#34;#likes&amp;#34;).html(likes);
        }
    });
}

$(&amp;#34;#submit&amp;#34;).click(function() {
    if ((!$(&amp;#34;#name&amp;#34;).val().trim()) || (!$(&amp;#34;#comment&amp;#34;).val().trim())) {
      alert(&amp;#34;Please enter both a name and a comment&amp;#34;);
      return false;
    }
    web3.ss.getAccounts(function (e, address) {
        if (!e) {
            $(&amp;#34;#form&amp;#34;).css(&amp;#34;display&amp;#34;, &amp;#34;none&amp;#34;);
            $(&amp;#34;#formSubmitted&amp;#34;).css(&amp;#34;display&amp;#34;, &amp;#34;block&amp;#34;);
            instance.addComment ($(&amp;#34;#name&amp;#34;).val(), $(&amp;#34;#email&amp;#34;).val(), $(&amp;#34;#comment&amp;#34;).val(), {
                gas: 499000,
                gasPrice: 0
            }, function (ee, r) {
                if (ee) {
                    window.alert(&amp;#34;Failed at &amp;#34; + address);
                }
            });
            setTimeout(function () {
                reload ();
            }, 5 * 1000);
        }
    });
    return false;
});&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;#2&lt;/em&gt; BUIDL 是一个开源的开发工具，支持添加开源的代码资源，点击Resources 。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在JavaScript 点击加号，将下面的JS资源粘贴到弹窗里：&lt;a href=&#34;https://code.jquery.com/jquery-3.4.1.min.js&#34;&gt;https://code.jquery.com/jquery-3.4.1.min.js&lt;/a&gt; 并点击确定&lt;/li&gt;
&lt;li&gt;在CSS 处点击加号，将下面的CSS 资源粘贴到弹窗里：&lt;a href=&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&#34;&gt;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&lt;/a&gt; 并点击确定。
添加好后，再次点击Resources，将输入框收回。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20190920-BUIDL-demo-06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;#3&lt;/em&gt; 点击最左边的Run，会在页面右侧预览网页样式。然后输入自己的看法，做个测试吧!（输入自己的评论后，需要等大概5秒左右的时间确认）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191020-public-comment-05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;#4&lt;/em&gt; 点击页面上方的Publish，输入网站的名称，然后等待大概30秒，点击launched 就可以通过网页的形式向周围的人传播。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20190920-BUIDL-demo-08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Second State goes to Devcon5 - Our story told in 3 photos</title>
      <link>http://blog.secondstate.io/post/20191014-secondstate-at-devcon5/</link>
      <pubDate>Mon, 14 Oct 2019 10:01:23 +0800</pubDate>
      
      <guid>http://blog.secondstate.io/post/20191014-secondstate-at-devcon5/</guid>
      
        <description>

&lt;h2 id=&#34;addressing-the-challenges-of-today-s-ethereum-smart-contract-development&#34;&gt;Addressing the challenges of today’s Ethereum smart contract development&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191014-SecondState-at-DevCon5-01.png&#34; alt=&#34;Second State at DevCon5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The first photo is from our session on the first day of Devcon. It is standing room only. We gave a very technical presentation and did all of our live demos from the &lt;a href=&#34;https://docs.secondstate.io/buidl-developer-tool/why-buidl&#34;&gt;BUIDL IDE&lt;/a&gt; with great success.&lt;/p&gt;

&lt;p&gt;The focus of our session is to address the challenges of today’s Ethereum smart contract development. We discussed solutions we have developed for today’s EVM, as well as future solutions for Ethereum 2.0. You can read about &lt;a href=&#34;https://www.secondstate.io/devcon5/&#34;&gt;the challenges and our solutions here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;second-state-is-a-key-innovator-in-the-evm-space&#34;&gt;Second State is a key innovator in the EVM space&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191014-SecondState-at-DevCon5-02.png&#34; alt=&#34;Second State at DevCon5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The second photo is from a Devcon keynote presentation by Terry Culver of &lt;a href=&#34;https://etclabs.org/&#34;&gt;ETC Labs&lt;/a&gt;. Second State is featured as a major innovator in EVM. Together with our partners at Ethereum Classic, CyberMiles, and now Ethereum, we are building &lt;a href=&#34;https://blog.secondstate.io/post/20190901-etc-partners-with-secondstate/&#34;&gt;the next generation EVM language toolchains&lt;/a&gt; based on LLVM and execution engines based on WebAssembly WASM.&lt;/p&gt;

&lt;h2 id=&#34;collaboration-with-ethereum-team-to-build-the-next-gen-compiler-toolchain&#34;&gt;Collaboration with Ethereum team to build the next-gen compiler toolchain&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.secondstate.io/images/20191014-SecondState-at-DevCon5-03.png&#34; alt=&#34;Second State at DevCon5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The third photo shows the Second State compiler team demonstrating our solution to the Ethereum Foundation Solidity team. The Second State &lt;a href=&#34;https://github.com/second-state/soll&#34;&gt;SOLL&lt;/a&gt; tool is the world’s first to successfully &lt;a href=&#34;https://www.youtube.com/watch?v=X-A6sP_HTy0&#34;&gt;compile a Solidity ERC20 contract into WASM bytecode and deploy it on the official Ewasm testnet&lt;/a&gt;. The outcome of this meeting is that we will collaborate with the Ethereum Foundation team to build the next-gen compiler toolchain for both Solidity and Vyper languages.&lt;/p&gt;

&lt;p&gt;Overall, Second State had a very successful Devcon5, and &lt;a href=&#34;http://blog.secondstate.io/post/20191006-etc-summit-recap/&#34;&gt;ETC Summit&lt;/a&gt; in the week before. We made new friends and forged important partnerships. May the force be with us!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS. The Second State SOLL team &lt;a href=&#34;https://blog.secondstate.io/post/20191022-soll-compiler-project/&#34;&gt;received a cash award from the Ethereum Foundation&lt;/a&gt; in the following week in Taipei.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PPS. If you are interested in the evolution of EVM technology, please checkout &lt;a href=&#34;https://hackernoon.com/diving-into-ethereums-virtual-machine-the-future-of-ewasm-wrk32iy&#34;&gt;an excellent article&lt;/a&gt; written by our engineer Tim McCallum&lt;/em&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>